---
name: "Pattern Language Example"
description: "Demonstrates the pattern language approach with a simple user model"
variables:
  - name: user_name
    description: "Name of the user"
    type: string
    default: "Alice"
  - name: user_email
    description: "Email address of the user"
    type: string
    default: "alice@example.com"
query: |
  PREFIX : <http://example.org/>
  PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
  
  SELECT ?className ?propName ?propType
  WHERE {
    ?class a rdfs:Class ;
           rdfs:label ?className .
    ?prop rdfs:domain ?class ;
          rdfs:label ?propName ;
          rdfs:range ?propType .
  }
  ORDER BY ?className ?propName
---

// Pattern Language Example: User Model
// Generated using GGen's pattern language approach
// This demonstrates how patterns compose to create coherent solutions

{{#each results}}
// Pattern: {{className}} - {{propName}}
// Type: {{propType}}
{{/each}}

// Example of pattern composition:
// 1. Knowledge-First Projection (RDF as source of truth)
// 2. Single File Generator (this template)
// 3. Deterministic Engine (reproducible output)

pub struct {{uppercase user_name}} {
    pub name: String,
    pub email: String,
}

impl {{uppercase user_name}} {
    pub fn new(name: String, email: String) -> Self {
        Self { name, email }
    }
    
    pub fn display_name(&self) -> String {
        format!("{} <{}>", self.name, self.email)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_user_creation() {
        let user = {{uppercase user_name}}::new(
            "{{user_name}}".to_string(),
            "{{user_email}}".to_string()
        );
        
        assert_eq!(user.name, "{{user_name}}");
        assert_eq!(user.email, "{{user_email}}");
    }
    
    #[test]
    fn test_display_name() {
        let user = {{uppercase user_name}}::new(
            "{{user_name}}".to_string(),
            "{{user_email}}".to_string()
        );
        
        assert_eq!(user.display_name(), "{{user_name}} <{{user_email}}>");
    }
}
