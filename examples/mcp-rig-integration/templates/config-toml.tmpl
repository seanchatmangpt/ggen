---
generator:
  name: "{{ project_name }}_config_toml"
  version: "0.1.0"
  description: "Runtime configuration template"

variables:
  project_name: "mcp-rig-agent"
  deepseek_support: true
  cohere_support: false
  openai_support: false
  log_dir: "logs"

output:
  path: "config.toml"
---
# {{ project_name }} Configuration
# This file configures AI providers and MCP servers

# ═══════════════════════════════════════════════════════════════════════════
# AI Provider Configuration
# ═══════════════════════════════════════════════════════════════════════════

[providers.deepseek]
# DeepSeek API key (can also be set via DEEPSEEK_API_KEY env var)
api_key = "${DEEPSEEK_API_KEY}"

# Model identifiers
model = "deepseek-chat"
chat_model = "deepseek-chat"
embeddings_model = "deepseek-embedding"

{% if openai_support %}
[providers.openai]
# OpenAI API key (can also be set via OPENAI_API_KEY env var)
api_key = "${OPENAI_API_KEY}"

# Model identifier
model = "gpt-4-turbo-preview"
{% endif %}

{% if cohere_support %}
[providers.cohere]
# Cohere API key (can also be set via COHERE_API_KEY env var)
api_key = "${COHERE_API_KEY}"

# Model identifier
model = "command-r-plus"
{% endif %}

# ═══════════════════════════════════════════════════════════════════════════
# MCP Server Configuration
# ═══════════════════════════════════════════════════════════════════════════

# Filesystem MCP Server (stdio transport)
# Provides tools for reading, writing, and managing files
[[mcp_servers]]
name = "filesystem"
transport = "stdio"
command = "npx"
args = ["-y", "@modelcontextprotocol/server-filesystem", "/tmp"]

[mcp_servers.settings]
# Filesystem-specific settings
allowed_operations = ["read", "write", "list", "delete"]
max_file_size = 10485760  # 10MB

# Time MCP Server (stdio transport)
# Provides tools for time and date operations
[[mcp_servers]]
name = "time"
transport = "stdio"
command = "npx"
args = ["-y", "@modelcontextprotocol/server-time"]

# # Weather MCP Server (SSE transport) - EXAMPLE
# # Uncomment and configure if you have a weather MCP server running
# [[mcp_servers]]
# name = "weather"
# transport = "sse"
# url = "http://localhost:3000/sse"

# # Database MCP Server (stdio transport) - EXAMPLE
# # Uncomment and configure for database operations
# [[mcp_servers]]
# name = "database"
# transport = "stdio"
# command = "npx"
# args = ["-y", "@modelcontextprotocol/server-postgres"]
#
# [mcp_servers.env]
# DATABASE_URL = "postgresql://user:password@localhost:5432/mydb"

# ═══════════════════════════════════════════════════════════════════════════
# Application Settings
# ═══════════════════════════════════════════════════════════════════════════

[settings]
# Directory for log files
log_dir = "{{ log_dir }}"

# Enable verbose logging
verbose = false

# ═══════════════════════════════════════════════════════════════════════════
# MCP Server Examples
# ═══════════════════════════════════════════════════════════════════════════
#
# Stdio Transport (Child Process):
# [[mcp_servers]]
# name = "my-server"
# transport = "stdio"
# command = "node"
# args = ["server.js"]
#
# SSE Transport (HTTP):
# [[mcp_servers]]
# name = "my-server"
# transport = "sse"
# url = "http://localhost:3000/sse"
#
# With Environment Variables:
# [[mcp_servers]]
# name = "my-server"
# transport = "stdio"
# command = "node"
# args = ["server.js"]
#
# [mcp_servers.env]
# API_KEY = "secret"
# DEBUG = "true"
#
# ═══════════════════════════════════════════════════════════════════════════
