# Advanced Lifecycle Demo - Root Configuration
# This demonstrates all lifecycle features with a multi-workspace project

[config]
default_to_workspace = false
skip_core_tasks = false
reduce_output = false

# Lifecycle configuration
[tasks.lifecycle]
description = "Root lifecycle orchestrator"
workspace = true
dependencies = [
    "init",
    "setup",
    "build",
    "test",
    "deploy"
]

# =============================================================================
# INIT PHASE - Project initialization
# =============================================================================

[tasks.init]
description = "Initialize the project and validate environment"
category = "lifecycle"
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🚀 Initializing Advanced Lifecycle Demo..."
echo "  📦 Workspace: advanced-lifecycle-demo"
echo "  🔧 Rust Version: $(rustc --version)"
echo "  📍 Working Directory: $(pwd)"

# Validate prerequisites
echo ""
echo "Validating prerequisites..."
command -v cargo >/dev/null 2>&1 || { echo "❌ cargo not found"; exit 1; }
command -v rustc >/dev/null 2>&1 || { echo "❌ rustc not found"; exit 1; }
echo "✅ All prerequisites met"

# Create necessary directories
mkdir -p target/cache
mkdir -p target/state
mkdir -p target/logs
mkdir -p target/metrics
echo "✅ Created build directories"

# Initialize state
echo '{"initialized":true,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > target/state/init.json
echo "✅ Initialized state"

echo ""
echo "✨ Initialization complete!"
'''

[tasks.init.env]
GGEN_PHASE = "init"
RUST_BACKTRACE = "1"

# =============================================================================
# SETUP PHASE - Dependencies and configuration
# =============================================================================

[tasks.setup]
description = "Setup dependencies and configuration"
category = "lifecycle"
dependencies = ["init"]
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "⚙️  Setting up project dependencies..."

# Check cache
if [ -f target/cache/deps.lock ]; then
    CACHE_TIME=$(stat -f %m target/cache/deps.lock 2>/dev/null || stat -c %Y target/cache/deps.lock)
    CARGO_TIME=$(stat -f %m Cargo.lock 2>/dev/null || stat -c %Y Cargo.lock)

    if [ "$CACHE_TIME" -ge "$CARGO_TIME" ]; then
        echo "✅ Dependencies cached, skipping setup"
        exit 0
    fi
fi

# Fetch dependencies
echo "📥 Fetching dependencies..."
cargo fetch --locked

# Cache validation
cp Cargo.lock target/cache/deps.lock
echo '{"cached":true,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > target/state/setup.json

echo "✅ Setup complete!"
'''

[tasks.setup.env]
GGEN_PHASE = "setup"

# =============================================================================
# BEFORE_BUILD HOOK - Pre-build validation
# =============================================================================

[tasks.before_build]
description = "Hook: Validate before build starts"
category = "lifecycle-hook"
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🔍 Running pre-build checks..."

# Validate state
if [ ! -f target/state/setup.json ]; then
    echo "❌ Setup phase not completed"
    exit 1
fi

# Check disk space
AVAILABLE=$(df -k . | tail -1 | awk '{print $4}')
if [ "$AVAILABLE" -lt 1048576 ]; then
    echo "⚠️  Low disk space: ${AVAILABLE}KB available"
fi

# Lint check
echo "🔎 Running clippy checks..."
cargo clippy --workspace --all-targets -- -D warnings 2>&1 | head -20 || true

echo "✅ Pre-build checks passed"
'''

[tasks.before_build.env]
GGEN_PHASE = "before_build"

# =============================================================================
# BUILD PHASE - Compilation with metrics
# =============================================================================

[tasks.build]
description = "Build all workspace members with metrics"
category = "lifecycle"
dependencies = ["setup", "before_build"]
workspace = true
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🔨 Building workspace members..."

START_TIME=$(date +%s)

# Build with detailed output
cargo build --workspace --release --timings

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

# Record metrics
echo '{
  "phase": "build",
  "duration_seconds": '$DURATION',
  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
  "success": true,
  "artifacts": {
    "cli": "target/release/lifecycle-cli",
    "server": "target/release/lifecycle-server",
    "worker": "target/release/lifecycle-worker"
  }
}' > target/metrics/build.json

echo "✅ Build completed in ${DURATION}s"
'''

[tasks.build.env]
GGEN_PHASE = "build"
CARGO_INCREMENTAL = "1"

# =============================================================================
# AFTER_BUILD HOOK - Post-build validation
# =============================================================================

[tasks.after_build]
description = "Hook: Validate build artifacts"
category = "lifecycle-hook"
dependencies = ["build"]
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🔍 Validating build artifacts..."

# Check artifacts
ARTIFACTS=(
    "target/release/lifecycle-cli"
    "target/release/lifecycle-server"
    "target/release/lifecycle-worker"
)

for artifact in "${ARTIFACTS[@]}"; do
    if [ -f "$artifact" ]; then
        SIZE=$(ls -lh "$artifact" | awk '{print $5}')
        echo "  ✅ $artifact ($SIZE)"
    else
        echo "  ❌ Missing: $artifact"
        exit 1
    fi
done

# Record validation
echo '{"validated":true,"timestamp":"'$(date -u +%Y-%m-%dT%H:%M:%SZ)'"}' > target/state/validation.json

echo "✅ All artifacts validated"
'''

[tasks.after_build.env]
GGEN_PHASE = "after_build"

# =============================================================================
# TEST PHASE - Comprehensive testing
# =============================================================================

[tasks.test]
description = "Run comprehensive test suite"
category = "lifecycle"
dependencies = ["after_build"]
workspace = true
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🧪 Running test suite..."

START_TIME=$(date +%s)

# Run tests with coverage
cargo test --workspace --release -- --nocapture --test-threads=4

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

# Record test metrics
echo '{
  "phase": "test",
  "duration_seconds": '$DURATION',
  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
  "success": true,
  "test_count": "all",
  "parallel_threads": 4
}' > target/metrics/test.json

echo "✅ Tests completed in ${DURATION}s"
'''

[tasks.test.env]
GGEN_PHASE = "test"
RUST_TEST_THREADS = "4"

# =============================================================================
# DEPLOY PHASE - Artifact deployment simulation
# =============================================================================

[tasks.deploy]
description = "Deploy artifacts (simulation)"
category = "lifecycle"
dependencies = ["test"]
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🚀 Deploying artifacts..."

# Create deployment directory
DEPLOY_DIR="target/deploy/$(date +%Y%m%d_%H%M%S)"
mkdir -p "$DEPLOY_DIR"

# Copy artifacts
cp target/release/lifecycle-cli "$DEPLOY_DIR/"
cp target/release/lifecycle-server "$DEPLOY_DIR/"
cp target/release/lifecycle-worker "$DEPLOY_DIR/"

# Create deployment manifest
echo '{
  "version": "0.1.0",
  "deployed_at": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
  "artifacts": [
    "lifecycle-cli",
    "lifecycle-server",
    "lifecycle-worker"
  ],
  "checksums": {
    "cli": "'$(shasum -a 256 target/release/lifecycle-cli | cut -d" " -f1)'",
    "server": "'$(shasum -a 256 target/release/lifecycle-server | cut -d" " -f1)'",
    "worker": "'$(shasum -a 256 target/release/lifecycle-worker | cut -d" " -f1)'"
  }
}' > "$DEPLOY_DIR/manifest.json"

# Record deployment
echo '{
  "phase": "deploy",
  "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%SZ)'",
  "success": true,
  "deploy_dir": "'$DEPLOY_DIR'"
}' > target/metrics/deploy.json

echo "✅ Deployed to: $DEPLOY_DIR"
cat "$DEPLOY_DIR/manifest.json"
'''

[tasks.deploy.env]
GGEN_PHASE = "deploy"

# =============================================================================
# UTILITY TASKS
# =============================================================================

[tasks.clean]
description = "Clean all build artifacts and caches"
category = "utility"
script_runner = "@shell"
script = '''
#!/bin/bash
set -e

echo "🧹 Cleaning build artifacts..."

cargo clean
rm -rf target/cache
rm -rf target/state
rm -rf target/logs
rm -rf target/metrics
rm -rf target/deploy

echo "✅ Clean complete"
'''

[tasks.status]
description = "Show current lifecycle status"
category = "utility"
script_runner = "@shell"
script = '''
#!/bin/bash

echo "📊 Lifecycle Status Report"
echo "=========================="
echo ""

# Check each phase
for phase in init setup validation build test deploy; do
    if [ -f "target/state/${phase}.json" ]; then
        echo "  ✅ $phase: $(cat target/state/${phase}.json)"
    elif [ -f "target/metrics/${phase}.json" ]; then
        echo "  ✅ $phase: $(cat target/metrics/${phase}.json)"
    else
        echo "  ⏸️  $phase: Not run"
    fi
done

echo ""
echo "📁 Build Artifacts:"
ls -lh target/release/lifecycle-* 2>/dev/null || echo "  No artifacts built"

echo ""
echo "📈 Latest Deployment:"
LATEST_DEPLOY=$(ls -td target/deploy/* 2>/dev/null | head -1)
if [ -n "$LATEST_DEPLOY" ]; then
    echo "  $LATEST_DEPLOY"
    cat "$LATEST_DEPLOY/manifest.json" 2>/dev/null || true
else
    echo "  No deployments"
fi
'''

[tasks.watch]
description = "Watch for changes and rebuild"
category = "utility"
script_runner = "@shell"
script = '''
#!/bin/bash

echo "👀 Watching for changes..."
echo "Press Ctrl+C to stop"
echo ""

cargo watch -x "make lifecycle"
'''

[tasks.parallel-example]
description = "Example of parallel task execution"
category = "example"
run_task = { name = ["build-cli", "build-server", "build-worker"], parallel = true }

[tasks.build-cli]
description = "Build CLI only"
script = "cargo build --release -p lifecycle-cli"

[tasks.build-server]
description = "Build server only"
script = "cargo build --release -p lifecycle-server"

[tasks.build-worker]
description = "Build worker only"
script = "cargo build --release -p lifecycle-worker"
