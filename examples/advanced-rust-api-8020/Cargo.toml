[package]
name = "advanced-rust-api"
version = "0.1.0"
edition = "2021"
authors = ["ggen team"]
description = "Production-ready REST API using ggen lifecycle + AI generation"
license = "MIT"

[workspace]

[lib]
name = "advanced_rust_api"
path = "src/lib.rs"

[[bin]]
name = "server"
path = "src/bin/server.rs"

# AI generator binary disabled in standalone marketplace version
# Requires ggen-core and ggen-ai dependencies
# [[bin]]
# name = "ai-generator"
# path = "src/bin/ai_generator.rs"

[dependencies]
# Web framework
axum = { version = "0.7", features = ["macros"] }
tokio = { version = "1.0", features = ["full"] }
tower-http = { version = "0.5", features = ["cors", "trace"] }

# Serialization
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"

# Database
sqlx = { version = "0.7", features = ["runtime-tokio-native-tls", "postgres", "uuid", "chrono"] }

# Error handling
thiserror = "1.0"
anyhow = "1.0"

# Logging
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter"] }

# Authentication
jsonwebtoken = "9.0"
bcrypt = "0.15"

# Utilities
uuid = { version = "1.0", features = ["serde", "v4"] }
chrono = { version = "0.4", features = ["serde"] }
dotenvy = "0.15"

# ggen integration (optional - for AI-powered generation)
# NOTE: These are only available when building from the ggen monorepo
# Marketplace standalone version doesn't include AI generation features
# ggen-core = { path = "../../ggen-core", optional = true }
# ggen-ai = { path = "../../ggen-ai", optional = true }

[dev-dependencies]
mockall = "0.12"
assert_fs = "1.0"
tempfile = "3.0"

[features]
default = []
# AI generation features disabled in standalone marketplace version
# When ggen-core and ggen-ai are published to crates.io, this can be re-enabled:
# ai-generation = ["ggen-core", "ggen-ai"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
strip = true
