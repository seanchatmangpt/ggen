name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [stable, beta]
        features:
          - ''
          - 'p2p'
          - 'graphql'
          - 'crypto'
          - 'all'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo index
        uses: actions/cache@v4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache cargo build
        uses: actions/cache@v4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}

      - name: Build with features
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo build --verbose
          else
            cargo build --verbose --features ${{ matrix.features }}
          fi

      - name: Run tests
        run: |
          if [ -z "${{ matrix.features }}" ]; then
            cargo test --verbose
          else
            cargo test --verbose --features ${{ matrix.features }}
          fi

  lint:
    name: Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-lint-${{ hashFiles('**/Cargo.lock') }}

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Run clippy (default features)
        run: cargo clippy -- -D warnings

      - name: Run clippy (all features)
        run: cargo clippy --all-features -- -D warnings

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-integration-${{ hashFiles('**/Cargo.lock') }}

      - name: Run integration tests (all features)
        run: cargo test --all-features --test '*' -- --test-threads=1
        env:
          RUST_TEST_THREADS: 1

  p2p-smoke-test:
    name: P2P Smoke Test
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.event.head_commit.message, '[p2p]') || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-p2p-${{ hashFiles('**/Cargo.lock') }}

      - name: Build P2P feature
        run: cargo build --features p2p

      - name: Run P2P tests
        run: cargo test --features p2p p2p --lib -- --test-threads=1
        timeout-minutes: 5

  graphql-smoke-test:
    name: GraphQL Smoke Test
    runs-on: ubuntu-latest
    needs: test
    if: contains(github.event.head_commit.message, '[graphql]') || github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-graphql-${{ hashFiles('**/Cargo.lock') }}

      - name: Build GraphQL feature
        run: cargo build --features graphql

      - name: Run GraphQL tests
        run: cargo test --features graphql graphql --lib

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate coverage
        run: cargo tarpaulin --all-features --workspace --timeout 300 --out Xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./cobertura.xml
          fail_ci_if_error: false

  build-verification:
    name: Build Verification
    runs-on: ubuntu-latest
    needs: [test, lint]
    steps:
      - uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-verify-${{ hashFiles('**/Cargo.lock') }}

      - name: Make verification script executable
        run: chmod +x scripts/verify-build.sh

      - name: Run build verification
        run: ./scripts/verify-build.sh

  all-checks-pass:
    name: All Checks Pass
    runs-on: ubuntu-latest
    needs: [test, lint, integration-tests, build-verification]
    steps:
      - name: Success
        run: echo "All CI checks passed successfully!"
