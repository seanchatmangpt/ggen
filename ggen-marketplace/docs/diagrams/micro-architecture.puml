@startuml ggen-micro-architecture
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Micro Architecture - ggen-marketplace Internal Module Structure

Container_Boundary(marketplace_crate, "ggen-marketplace crate") {
    
    Container_Boundary(public_api, "Public API Layer") {
        Component(lib_rs, "lib.rs", "Rust", "Public API exports and re-exports")
        Component(prelude, "prelude.rs", "Rust", "Common imports and traits")
        Component(error_types, "error.rs", "Rust", "Error type definitions")
        Component(types, "types.rs", "Rust", "Core type definitions")
    }
    
    Container_Boundary(client_layer, "Client Layer") {
        Component(marketplace_client, "client.rs", "Rust", "Main MarketplaceClient implementation")
        Component(builder, "builder.rs", "Rust", "MarketplaceBuilder pattern")
        Component(config, "config.rs", "Rust", "Configuration management")
    }
    
    Container_Boundary(traits_module, "Traits Module") {
        Component(traits_mod, "traits/mod.rs", "Rust", "Trait module exports")
        Component(registry_trait, "traits/registry.rs", "Trait", "Registry trait definition")
        Component(storage_trait, "traits/storage.rs", "Trait", "PackageStore trait definition")
        Component(search_trait, "traits/search.rs", "Trait", "SearchEngine trait definition")
        Component(crypto_trait, "traits/crypto.rs", "Trait", "CryptoVerifier trait definition")
        Component(metrics_trait, "traits/metrics.rs", "Trait", "MetricsCollector trait definition")
    }
    
    Container_Boundary(implementations, "Implementation Modules") {
        Component(registry_impl, "registry/mod.rs", "Rust", "Registry implementations")
        Component(storage_impl, "storage/mod.rs", "Rust", "Storage implementations")
        Component(search_impl, "search/mod.rs", "Rust", "Search implementations")
        Component(crypto_impl, "crypto/mod.rs", "Rust", "Crypto implementations")
        Component(metrics_impl, "metrics/mod.rs", "Rust", "Metrics implementations")
    }
    
    Container_Boundary(advanced_features, "Advanced Features") {
        Component(p2p_module, "p2p/mod.rs", "Rust", "P2P networking module")
        Component(wasm_module, "wasm/mod.rs", "Rust", "WASM plugin system")
        Component(ml_module, "ml/mod.rs", "Rust", "Machine learning module")
        Component(cache_module, "cache/mod.rs", "Rust", "Caching layer")
    }
    
    Container_Boundary(utilities, "Utilities") {
        Component(utils_mod, "utils/mod.rs", "Rust", "Utility functions")
        Component(serialization, "utils/serde.rs", "Rust", "Serialization helpers")
        Component(validation, "utils/validation.rs", "Rust", "Input validation")
        Component(logging, "utils/logging.rs", "Rust", "Logging utilities")
    }
}

' Registry implementations
Container_Boundary(registry_implementations, "Registry Implementations") {
    Component(local_registry, "registry/local.rs", "SQLite", "Local SQLite registry")
    Component(distributed_registry, "registry/distributed.rs", "PostgreSQL", "Distributed registry")
    Component(cached_registry, "registry/cached.rs", "Wrapper", "Cached registry wrapper")
    Component(mock_registry, "registry/mock.rs", "Test", "Mock registry for testing")
}

' Storage implementations
Container_Boundary(storage_implementations, "Storage Implementations") {
    Component(file_storage, "storage/file.rs", "Filesystem", "File-based storage")
    Component(s3_storage, "storage/s3.rs", "AWS S3", "S3-compatible storage")
    Component(ipfs_storage, "storage/ipfs.rs", "IPFS", "IPFS storage backend")
    Component(memory_storage, "storage/memory.rs", "In-memory", "Memory storage for testing")
}

' Search implementations
Container_Boundary(search_implementations, "Search Implementations") {
    Component(tantivy_search, "search/tantivy.rs", "Tantivy", "Tantivy search engine")
    Component(meilisearch, "search/meilisearch.rs", "MeiliSearch", "MeiliSearch client")
    Component(memory_search, "search/memory.rs", "In-memory", "Memory search for testing")
    Component(index_manager, "search/index.rs", "Manager", "Index management utilities")
}

' Crypto implementations
Container_Boundary(crypto_implementations, "Crypto Implementations") {
    Component(ed25519_crypto, "crypto/ed25519.rs", "ed25519-dalek", "Ed25519 signatures")
    Component(checksums, "crypto/checksums.rs", "SHA2/BLAKE3", "Checksum algorithms")
    Component(keyring, "crypto/keyring.rs", "Key Management", "Key storage and management")
    Component(trust_store, "crypto/trust.rs", "Trust", "Trust chain management")
}

' P2P module details
Container_Boundary(p2p_implementations, "P2P Implementations") {
    Component(p2p_network, "p2p/network.rs", "libp2p", "P2P network layer")
    Component(discovery, "p2p/discovery.rs", "Kademlia", "Peer discovery")
    Component(gossip, "p2p/gossip.rs", "GossipSub", "Gossip protocol")
    Component(routing, "p2p/routing.rs", "Routing", "Message routing")
}

' WASM module details
Container_Boundary(wasm_implementations, "WASM Implementations") {
    Component(wasm_runtime, "wasm/runtime.rs", "wasmtime", "WASM runtime")
    Component(plugin_manager, "wasm/plugins.rs", "Manager", "Plugin management")
    Component(sandbox, "wasm/sandbox.rs", "Security", "Security sandbox")
    Component(plugin_api, "wasm/api.rs", "API", "Plugin API definitions")
}

' Internal relationships
Rel(lib_rs, prelude, "Re-exports", "")
Rel(lib_rs, error_types, "Exports", "")
Rel(lib_rs, types, "Exports", "")

Rel(marketplace_client, builder, "Uses", "")
Rel(marketplace_client, config, "Uses", "")

Rel(builder, registry_trait, "Configures", "")
Rel(builder, storage_trait, "Configures", "")
Rel(builder, search_trait, "Configures", "")
Rel(builder, crypto_trait, "Configures", "")
Rel(builder, metrics_trait, "Configures", "")

Rel(registry_trait, local_registry, "Implemented by", "")
Rel(registry_trait, distributed_registry, "Implemented by", "")
Rel(registry_trait, cached_registry, "Implemented by", "")

Rel(storage_trait, file_storage, "Implemented by", "")
Rel(storage_trait, s3_storage, "Implemented by", "")
Rel(storage_trait, ipfs_storage, "Implemented by", "")

Rel(search_trait, tantivy_search, "Implemented by", "")
Rel(search_trait, meilisearch, "Implemented by", "")
Rel(search_trait, index_manager, "Uses", "")

Rel(crypto_trait, ed25519_crypto, "Implemented by", "")
Rel(crypto_trait, checksums, "Implemented by", "")
Rel(crypto_trait, keyring, "Uses", "")
Rel(crypto_trait, trust_store, "Uses", "")

Rel(marketplace_client, p2p_module, "Uses", "")
Rel(marketplace_client, wasm_module, "Uses", "")
Rel(marketplace_client, ml_module, "Uses", "")
Rel(marketplace_client, cache_module, "Uses", "")

Rel(p2p_module, p2p_network, "Contains", "")
Rel(p2p_module, discovery, "Contains", "")
Rel(p2p_module, gossip, "Contains", "")

Rel(wasm_module, wasm_runtime, "Contains", "")
Rel(wasm_module, plugin_manager, "Contains", "")
Rel(wasm_module, sandbox, "Contains", "")

note right of marketplace_crate
  **Module Organization:**
  • Clear separation of concerns
  • Trait-based architecture
  • Multiple implementations per trait
  • Feature-gated modules
  • Comprehensive testing support
end note

note right of traits_module
  **Trait Design:**
  • Async-first APIs
  • Generic over implementations
  • Comprehensive error handling
  • Extensible and composable
  • Production-ready interfaces
end note

SHOW_LEGEND()

@enduml


