@startuml ggen-data-structures
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Data Structures - ggen-marketplace Core Types and Models

Container_Boundary(core_types, "Core Types") {
    
    Component(package_id, "PackageId", "Struct", "Unique package identifier") {
        Component(name_field, "name: String", "Field", "Package name")
        Component(version_field, "version: Version", "Field", "Semantic version")
        Component(namespace_field, "namespace: Option<String>", "Field", "Optional namespace")
    }
    
    Component(package_metadata, "PackageMetadata", "Struct", "Package information") {
        Component(id_field, "id: PackageId", "Field", "Package identifier")
        Component(description_field, "description: String", "Field", "Package description")
        Component(authors_field, "authors: Vec<String>", "Field", "Author list")
        Component(license_field, "license: String", "Field", "License identifier")
        Component(repository_field, "repository: Option<Url>", "Field", "Source repository")
        Component(homepage_field, "homepage: Option<Url>", "Field", "Homepage URL")
        Component(keywords_field, "keywords: Vec<String>", "Field", "Search keywords")
        Component(categories_field, "categories: Vec<String>", "Field", "Package categories")
        Component(dependencies_field, "dependencies: HashMap<String, VersionReq>", "Field", "Dependencies")
        Component(checksums_field, "checksums: Checksums", "Field", "Content checksums")
        Component(signature_field, "signature: Signature", "Field", "Digital signature")
        Component(published_at_field, "published_at: DateTime<Utc>", "Field", "Publication timestamp")
    }
    
    Component(content_hash, "ContentHash", "Struct", "Content-addressed hash") {
        Component(algorithm_field, "algorithm: HashAlgorithm", "Field", "Hash algorithm")
        Component(digest_field, "digest: Vec<u8>", "Field", "Hash digest")
    }
    
    Component(signature, "Signature", "Struct", "Digital signature") {
        Component(algorithm_field, "algorithm: SignatureAlgorithm", "Field", "Signature algorithm")
        Component(public_key_field, "public_key: PublicKey", "Field", "Signer's public key")
        Component(signature_bytes_field, "signature_bytes: Vec<u8>", "Field", "Signature bytes")
    }
}

Container_Boundary(search_types, "Search Types") {
    
    Component(search_query, "SearchQuery", "Struct", "Search parameters") {
        Component(text_field, "text: String", "Field", "Search text")
        Component(categories_field, "categories: Vec<String>", "Field", "Category filters")
        Component(tags_field, "tags: Vec<String>", "Field", "Tag filters")
        Component(min_downloads_field, "min_downloads: Option<u64>", "Field", "Minimum downloads")
        Component(limit_field, "limit: usize", "Field", "Result limit")
        Component(offset_field, "offset: usize", "Field", "Pagination offset")
    }
    
    Component(search_result, "SearchResult", "Struct", "Search result") {
        Component(package_field, "package: PackageMetadata", "Field", "Package metadata")
        Component(score_field, "score: f32", "Field", "Relevance score")
        Component(highlights_field, "highlights: Vec<String>", "Field", "Search highlights")
    }
    
    Component(search_filters, "SearchFilters", "Struct", "Search filters") {
        Component(categories_field, "categories: Vec<String>", "Field", "Category filters")
        Component(languages_field, "languages: Vec<String>", "Field", "Language filters")
        Component(licenses_field, "licenses: Vec<String>", "Field", "License filters")
        Component(authors_field, "authors: Vec<String>", "Field", "Author filters")
        Component(min_rating_field, "min_rating: Option<f32>", "Field", "Minimum rating")
        Component(date_range_field, "date_range: Option<DateRange>", "Field", "Date range filter")
    }
}

Container_Boundary(crypto_types, "Cryptographic Types") {
    
    Component(key_pair, "KeyPair", "Struct", "Public/private key pair") {
        Component(public_key_field, "public_key: PublicKey", "Field", "Public key")
        Component(private_key_field, "private_key: PrivateKey", "Field", "Private key")
    }
    
    Component(public_key, "PublicKey", "Struct", "Public key") {
        Component(algorithm_field, "algorithm: KeyAlgorithm", "Field", "Key algorithm")
        Component(key_bytes_field, "key_bytes: Vec<u8>", "Field", "Key bytes")
        Component(fingerprint_field, "fingerprint: String", "Field", "Key fingerprint")
    }
    
    Component(private_key, "PrivateKey", "Struct", "Private key") {
        Component(algorithm_field, "algorithm: KeyAlgorithm", "Field", "Key algorithm")
        Component(key_bytes_field, "key_bytes: Vec<u8>", "Field", "Key bytes (encrypted)")
        Component(encrypted_field, "encrypted: bool", "Field", "Encryption status")
    }
    
    Component(checksums, "Checksums", "Struct", "Multiple checksums") {
        Component(sha256_field, "sha256: Option<Vec<u8>>", "Field", "SHA-256 hash")
        Component(blake3_field, "blake3: Option<Vec<u8>>", "Field", "BLAKE3 hash")
        Component(sha512_field, "sha512: Option<Vec<u8>>", "Field", "SHA-512 hash")
    }
}

Container_Boundary(p2p_types, "P2P Types") {
    
    Component(peer_info, "PeerInfo", "Struct", "Peer information") {
        Component(peer_id_field, "peer_id: PeerId", "Field", "Unique peer identifier")
        Component(addresses_field, "addresses: Vec<Multiaddr>", "Field", "Peer addresses")
        Component(protocols_field, "protocols: Vec<String>", "Field", "Supported protocols")
        Component(metadata_field, "metadata: HashMap<String, String>", "Field", "Peer metadata")
    }
    
    Component(peer_score, "PeerScore", "Struct", "Peer reputation") {
        Component(peer_id_field, "peer_id: PeerId", "Field", "Peer identifier")
        Component(score_field, "score: f32", "Field", "Reputation score")
        Component(trust_level_field, "trust_level: TrustLevel", "Field", "Trust level")
        Component(last_seen_field, "last_seen: DateTime<Utc>", "Field", "Last contact time")
    }
    
    Component(message, "Message", "Enum", "P2P message types") {
        Component(announcement_variant, "Announcement(PackageAnnouncement)", "Variant", "Package announcement")
        Component(request_variant, "Request(PackageRequest)", "Variant", "Package request")
        Component(response_variant, "Response(PackageResponse)", "Variant", "Package response")
        Component(heartbeat_variant, "Heartbeat(PeerInfo)", "Variant", "Peer heartbeat")
    }
}

Container_Boundary(plugin_types, "Plugin Types") {
    
    Component(plugin_metadata, "PluginMetadata", "Struct", "Plugin information") {
        Component(name_field, "name: String", "Field", "Plugin name")
        Component(version_field, "version: Version", "Field", "Plugin version")
        Component(description_field, "description: String", "Field", "Plugin description")
        Component(author_field, "author: String", "Field", "Plugin author")
        Component(plugin_type_field, "plugin_type: PluginType", "Field", "Plugin type")
        Component(capabilities_field, "capabilities: Vec<Capability>", "Field", "Plugin capabilities")
        Component(wasm_hash_field, "wasm_hash: ContentHash", "Field", "WASM binary hash")
    }
    
    Component(plugin_context, "PluginContext", "Struct", "Plugin execution context") {
        Component(marketplace_client_field, "marketplace_client: Arc<MarketplaceClient>", "Field", "Marketplace client")
        Component(config_field, "config: PluginConfig", "Field", "Plugin configuration")
        Component(resources_field, "resources: ResourceLimits", "Field", "Resource limits")
        Component(permissions_field, "permissions: Vec<Permission>", "Field", "Plugin permissions")
    }
    
    Component(plugin_result, "PluginResult", "Enum", "Plugin execution result") {
        Component(success_variant, "Success(PluginOutput)", "Variant", "Successful execution")
        Component(error_variant, "Error(PluginError)", "Variant", "Execution error")
        Component(timeout_variant, "Timeout", "Variant", "Execution timeout")
    }
}

Container_Boundary(metrics_types, "Metrics Types") {
    
    Component(metric_value, "MetricValue", "Enum", "Metric value types") {
        Component(counter_variant, "Counter(u64)", "Variant", "Counter metric")
        Component(gauge_variant, "Gauge(f64)", "Variant", "Gauge metric")
        Component(histogram_variant, "Histogram(Vec<f64>)", "Variant", "Histogram metric")
        Component(timer_variant, "Timer(Duration)", "Variant", "Timer metric")
    }
    
    Component(metric_labels, "MetricLabels", "Struct", "Metric labels") {
        Component(labels_field, "labels: HashMap<String, String>", "Field", "Label key-value pairs")
    }
    
    Component(performance_metrics, "PerformanceMetrics", "Struct", "Performance metrics") {
        Component(search_latency_field, "search_latency: Histogram", "Field", "Search operation latency")
        Component(download_speed_field, "download_speed: Gauge", "Field", "Download speed")
        Component(cache_hit_ratio_field, "cache_hit_ratio: Gauge", "Field", "Cache hit ratio")
        Component(p2p_sync_time_field, "p2p_sync_time: Histogram", "Field", "P2P sync time")
        Component(memory_usage_field, "memory_usage: Gauge", "Field", "Memory usage")
    }
}

' Relationships between types
Rel(package_metadata, package_id, "Contains", "")
Rel(package_metadata, content_hash, "References", "")
Rel(package_metadata, signature, "Contains", "")

Rel(search_result, package_metadata, "Contains", "")
Rel(search_query, search_filters, "Uses", "")

Rel(signature, public_key, "References", "")
Rel(key_pair, public_key, "Contains", "")
Rel(key_pair, private_key, "Contains", "")

Rel(peer_info, peer_score, "Related to", "")
Rel(message, peer_info, "References", "")

Rel(plugin_metadata, content_hash, "References", "")
Rel(plugin_context, plugin_metadata, "Uses", "")
Rel(plugin_result, plugin_context, "Returns", "")

Rel(performance_metrics, metric_value, "Uses", "")
Rel(metric_value, metric_labels, "Uses", "")

note right of core_types
  **Core Type Design:**
  • Immutable by default
  • Comprehensive validation
  • Serialization support
  • Clone-friendly
  • Memory efficient
end note

note right of search_types
  **Search Type Design:**
  • Flexible filtering
  • Pagination support
  • Relevance scoring
  • Highlight support
  • Performance optimized
end note

note right of crypto_types
  **Crypto Type Design:**
  • Multiple algorithm support
  • Secure key handling
  • Fingerprint generation
  • Encryption support
  • Trust management
end note

SHOW_LEGEND()

@enduml


