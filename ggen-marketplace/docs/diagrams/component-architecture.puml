@startuml ggen-marketplace-components
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

title Component Diagram for ggen-marketplace - Internal Trait Architecture

Container_Boundary(marketplace_lib, "ggen-marketplace Library") {
    
    Component(marketplace_client, "MarketplaceClient", "Rust", "Main entry point for all marketplace operations")
    
    Component(builder, "MarketplaceBuilder", "Rust", "Builder pattern for client initialization")
    
    Container_Boundary(traits_layer, "Core Traits Layer") {
        Component(registry_trait, "Registry Trait", "Trait", "Package metadata management")
        Component(storage_trait, "PackageStore Trait", "Trait", "Binary storage abstraction")
        Component(search_trait, "SearchEngine Trait", "Trait", "Full-text search operations")
        Component(crypto_trait, "CryptoVerifier Trait", "Trait", "Cryptographic operations")
        Component(metrics_trait, "MetricsCollector Trait", "Trait", "Telemetry and observability")
        Component(replication_trait, "Replication Trait", "Trait", "Distributed consensus (optional)")
    }
    
    Container_Boundary(implementations, "Concrete Implementations") {
        Component(local_registry, "LocalRegistry", "SQLite", "Local package metadata store")
        Component(file_store, "FilePackageStore", "Filesystem", "File-based package storage")
        Component(tantivy_search, "TantivySearchEngine", "Tantivy", "Full-text search with custom scoring")
        Component(ed25519_crypto, "Ed25519CryptoVerifier", "ed25519-dalek", "Digital signatures and checksums")
        Component(prometheus_metrics, "PrometheusCollector", "Prometheus", "Metrics collection")
        Component(raft_replication, "RaftReplication", "Raft", "Consensus algorithm (optional)")
    }
    
    Container_Boundary(advanced_features, "Advanced Features") {
        Component(p2p_network, "P2P Network", "libp2p", "Distributed peer discovery and gossip")
        Component(wasm_runtime, "WASM Runtime", "wasmtime", "Plugin system for custom validators")
        Component(ml_recommender, "ML Recommender", "ndarray", "Package recommendations")
        Component(quality_scorer, "Quality Scorer", "Custom", "Package quality metrics")
        Component(cache_layer, "CacheLayer", "Moka", "Smart caching for metadata and search")
    }
    
    Container_Boundary(data_models, "Data Models") {
        Component(package_metadata, "PackageMetadata", "Struct", "Package information and metadata")
        Component(package_id, "PackageId", "Struct", "Unique package identifier")
        Component(content_hash, "ContentHash", "Struct", "Content-addressed hash (CID)")
        Component(signature, "Signature", "Struct", "Cryptographic signature")
        Component(search_query, "SearchQuery", "Struct", "Search parameters and filters")
        Component(search_result, "SearchResult", "Struct", "Search results with ranking")
    }
    
    Container_Boundary(error_handling, "Error Handling") {
        Component(marketplace_error, "MarketplaceError", "Enum", "Main error type")
        Component(registry_error, "RegistryError", "Enum", "Registry-specific errors")
        Component(storage_error, "StorageError", "Enum", "Storage-specific errors")
        Component(search_error, "SearchError", "Enum", "Search-specific errors")
        Component(crypto_error, "CryptoError", "Enum", "Cryptographic errors")
    }
}

' Client to Builder
Rel(marketplace_client, builder, "Initialized by", "")

' Builder to Traits
Rel(builder, registry_trait, "Configures", "")
Rel(builder, storage_trait, "Configures", "")
Rel(builder, search_trait, "Configures", "")
Rel(builder, crypto_trait, "Configures", "")
Rel(builder, metrics_trait, "Configures", "")
Rel(builder, replication_trait, "Configures", "")

' Traits to Implementations
Rel(registry_trait, local_registry, "Implemented by", "")
Rel(storage_trait, file_store, "Implemented by", "")
Rel(search_trait, tantivy_search, "Implemented by", "")
Rel(crypto_trait, ed25519_crypto, "Implemented by", "")
Rel(metrics_trait, prometheus_metrics, "Implemented by", "")
Rel(replication_trait, raft_replication, "Implemented by", "")

' Client uses Advanced Features
Rel(marketplace_client, p2p_network, "Discovers peers", "async")
Rel(marketplace_client, wasm_runtime, "Loads plugins", "WASM")
Rel(marketplace_client, ml_recommender, "Gets recommendations", "")
Rel(marketplace_client, quality_scorer, "Scores packages", "")
Rel(marketplace_client, cache_layer, "Caches requests", "async")

' Cache integration
Rel(cache_layer, local_registry, "Caches", "")
Rel(cache_layer, tantivy_search, "Caches", "")

' Data flow
Rel(marketplace_client, package_metadata, "Uses", "")
Rel(marketplace_client, package_id, "Uses", "")
Rel(marketplace_client, content_hash, "Uses", "")
Rel(marketplace_client, signature, "Uses", "")
Rel(marketplace_client, search_query, "Uses", "")
Rel(marketplace_client, search_result, "Returns", "")

' Error handling
Rel(marketplace_client, marketplace_error, "Returns", "")
Rel(local_registry, registry_error, "Returns", "")
Rel(file_store, storage_error, "Returns", "")
Rel(tantivy_search, search_error, "Returns", "")
Rel(ed25519_crypto, crypto_error, "Returns", "")

note right of traits_layer
  **Trait-Based Architecture**
  • Extensible through traits
  • Multiple implementations
  • Dependency injection
  • Testable with mocks
  • Async-first design
end note

note right of implementations
  **Local-First Implementations**
  • SQLite for metadata
  • Filesystem for storage
  • Tantivy for search
  • ed25519 for crypto
  • All embedded, no external deps
end note

note right of advanced_features
  **Advanced Capabilities**
  • P2P networking (libp2p)
  • WASM plugin system
  • ML recommendations
  • Quality scoring
  • Smart caching (Moka)
end note

SHOW_LEGEND()

@enduml


