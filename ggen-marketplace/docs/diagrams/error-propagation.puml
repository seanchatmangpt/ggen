@startuml ggen-error-propagation
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Error Propagation - ggen-marketplace Comprehensive Error Handling

actor User as "User"
participant "Ggen CLI" as CLI
participant "MarketplaceClient" as Client
participant "Error Handler" as Handler
participant "Error Context" as Context
participant "Error Recovery" as Recovery
participant "Error Logger" as Logger
participant "Error Metrics" as Metrics

== Error Type Hierarchy ==

note over Handler: Error type classification

Handler -> Handler: classify_error(error)

alt Network Errors
    Handler -> Handler: NetworkError {
        ConnectionTimeout,
        DnsResolutionFailed,
        PeerUnreachable,
        NetworkPartition,
        ProtocolError
    }
else Storage Errors
    Handler -> Handler: StorageError {
        DiskFull,
        PermissionDenied,
        FileCorrupted,
        StorageUnavailable,
        IoError
    }
else Security Errors
    Handler -> Handler: SecurityError {
        InvalidSignature,
        UntrustedPublisher,
        ChecksumMismatch,
        KeyRevoked,
        AuthenticationFailed
    }
else Validation Errors
    Handler -> Handler: ValidationError {
        InvalidPackageFormat,
        MissingDependencies,
        VersionConflict,
        MetadataInvalid,
        SchemaViolation
    }
else System Errors
    Handler -> Handler: SystemError {
        OutOfMemory,
        CpuLimitExceeded,
        ResourceExhausted,
        SystemUnavailable,
        ConfigurationError
    }
end

== Error Propagation Chain ==

User -> CLI: ggen market install invalid-package
CLI -> Client: install_package("invalid-package")

Client -> Client: execute_installation()
Client -> Handler: handle_operation_error(error)

note over Handler: 1. Capture error context
Handler -> Context: capture_error_context(
    operation: "install_package",
    input: "invalid-package",
    timestamp: now(),
    user_id: user_id,
    session_id: session_id
)
Context --> Handler: ErrorContext

note over Handler: 2. Classify error type
Handler -> Handler: classify_error(technical_error)
Handler --> Handler: ErrorType { ValidationError }

note over Handler: 3. Determine recovery strategy
Handler -> Recovery: determine_recovery_strategy(error_type)
Recovery --> Handler: RecoveryStrategy { SuggestAlternatives }

note over Handler: 4. Generate user-friendly message
Handler -> Handler: generate_user_message(technical_error, context)
Handler --> Handler: UserMessage { "Package 'invalid-package' not found. Try 'ggen market search invalid' to find similar packages." }

note over Handler: 5. Log error with context
Handler -> Logger: log_error_with_context(
    error: technical_error,
    context: error_context,
    recovery_strategy: recovery_strategy,
    user_message: user_message
)
Logger --> Handler: Logged

note over Handler: 6. Update error metrics
Handler -> Metrics: record_error_metric(
    error_type: ValidationError,
    operation: "install_package",
    recovery_time: recovery_time,
    user_impact: "high"
)
Metrics --> Handler: Recorded

Handler --> Client: ErrorHandled
Client --> CLI: UserFriendlyError
CLI --> User: Helpful error message with suggestions

== Error Context Preservation ==

note over Context: Error context capture

Context -> Context: capture_stack_trace()
Context -> Context: record_operation_context()
Context -> Context: log_system_state()
Context -> Context: store_debug_information()

Context -> Context: create_error_report(
    error: technical_error,
    context: operation_context,
    stack_trace: stack_trace,
    system_state: system_state,
    user_actions: user_actions,
    timestamp: timestamp,
    session_id: session_id,
    request_id: request_id
)

== Error Recovery Strategies ==

note over Recovery: Recovery strategy implementation

Recovery -> Recovery: implement_recovery_strategies()

Recovery -> Recovery: network_recovery()
Recovery -> Recovery: storage_recovery()
Recovery -> Recovery: security_recovery()
Recovery -> Recovery: validation_recovery()
Recovery -> Recovery: system_recovery()

note over Recovery: Network Recovery
Recovery -> Recovery: retry_with_different_peer()
Recovery -> Recovery: fallback_to_cached_data()
Recovery -> Recovery: enable_offline_mode()
Recovery -> Recovery: queue_for_later_sync()

note over Recovery: Storage Recovery
Recovery -> Recovery: cleanup_corrupted_files()
Recovery -> Recovery: recreate_index()
Recovery -> Recovery: use_backup_storage()
Recovery -> Recovery: request_redownload()

note over Recovery: Security Recovery
Recovery -> Recovery: refresh_trust_store()
Recovery -> Recovery: update_revocation_lists()
Recovery -> Recovery: revalidate_signatures()
Recovery -> Recovery: quarantine_suspicious_packages()

== Error Logging and Monitoring ==

note over Logger: Comprehensive error logging

Logger -> Logger: log_error_with_structured_data(
    error_type: error_type,
    error_message: error_message,
    stack_trace: stack_trace,
    context: error_context,
    recovery_strategy: recovery_strategy,
    user_impact: user_impact,
    timestamp: timestamp
)

Logger -> Logger: implement_log_rotation()
Logger -> Logger: compress_old_logs()
Logger -> Logger: archive_error_logs()

Logger -> Logger: send_errors_to_monitoring_system()
Logger -> Logger: trigger_alerting_on_critical_errors()
Logger -> Logger: generate_error_reports()

== Error Metrics and Analytics ==

note over Metrics: Error metrics collection

Metrics -> Metrics: track_error_rates_by_type()
Metrics -> Metrics: monitor_recovery_times()
Metrics -> Metrics: measure_user_impact()
Metrics -> Metrics: analyze_error_patterns()

Metrics -> Metrics: calculate_error_slos()
Metrics -> Metrics: track_error_trends()
Metrics -> Metrics: identify_error_hotspots()

Metrics -> Metrics: export_metrics_to_prometheus()
Metrics -> Metrics: create_error_dashboards()
Metrics -> Metrics: generate_error_analytics()

== Error Handling in Async Context ==

User -> Client: async_operation()
Client -> Handler: handle_async_error(error)

note over Handler: 1. Handle async error propagation
Handler -> Handler: propagate_error_through_async_chain()
Handler -> Handler: maintain_error_context_across_await_points()
Handler -> Handler: handle_task_cancellation_errors()

note over Handler: 2. Cleanup async resources
Handler -> Handler: cleanup_async_resources_on_error()
Handler -> Handler: cancel_pending_async_operations()
Handler -> Handler: release_async_handles()

note over Handler: 3. Handle timeout errors
Handler -> Handler: detect_async_timeouts()
Handler -> Handler: implement_timeout_recovery()
Handler -> Handler: provide_timeout_feedback()

== Error Boundary Implementation ==

note over Handler: Error boundary patterns

Handler -> Handler: implement_error_boundaries()
Handler -> Handler: isolate_error_impact()
Handler -> Handler: prevent_error_cascading()

Handler -> Handler: use_result_types()
Handler -> Handler: implement_error_handling_middleware()
Handler -> Handler: create_error_recovery_wrappers()

== User Experience Optimization ==

note over Handler: User-friendly error handling

Handler -> Handler: generate_actionable_error_messages()
Handler -> Handler: provide_error_recovery_suggestions()
Handler -> Handler: implement_progressive_error_disclosure()

Handler -> Handler: use_error_codes_for_support()
Handler -> Handler: provide_contextual_help()
Handler -> Handler: implement_error_prevention()

== Error Testing and Validation ==

note over Handler: Error handling testing

Handler -> Handler: test_error_scenarios()
Handler -> Handler: validate_error_recovery()
Handler -> Handler: verify_error_logging()

Handler -> Handler: test_error_propagation()
Handler -> Handler: validate_user_experience()
Handler -> Handler: verify_error_metrics()

== Error Prevention Strategies ==

note over Handler: Proactive error prevention

Handler -> Handler: implement_input_validation()
Handler -> Handler: use_type_safety()
Handler -> Handler: implement_contract_validation()

Handler -> Handler: use_defensive_programming()
Handler -> Handler: implement_graceful_degradation()
Handler -> Handler: provide_fallback_mechanisms()

note over User, Metrics
  **Error Handling Benefits:**
  • Comprehensive error classification
  • Context preservation for debugging
  • Multiple recovery strategies
  • User-friendly error messages
  • Structured error logging
  • Error metrics and analytics
  • Async error handling
  • Error boundary isolation
  • Proactive error prevention
  • Continuous error monitoring
end note

@enduml


