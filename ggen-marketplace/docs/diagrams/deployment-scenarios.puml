@startuml ggen-marketplace-deployment
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

title Deployment Scenarios for ggen-marketplace

' Scenario 1: Single Developer Node
System_Boundary(dev_machine, "Developer Machine") {
    Container(ggen_cli, "Ggen CLI", "Rust Binary", "Single binary with embedded marketplace")
    
    System_Boundary(local_marketplace, "Local Marketplace") {
        Component(local_registry, "LocalRegistry", "SQLite", "~/.ggen/registry.db")
        Component(file_storage, "FilePackageStore", "Filesystem", "~/.ggen/packages/")
        Component(tantivy_search, "TantivySearchEngine", "Tantivy", "~/.ggen/search/")
        Component(ipfs_node, "IPFS Node", "Embedded", "~/.ggen/ipfs/")
        Component(p2p_network, "P2P Network", "libp2p", "Optional peer discovery")
    }
}

' Scenario 2: Team Development
System_Boundary(team_network, "Team Network") {
    Container(dev1_cli, "Dev 1 CLI", "Rust Binary", "Developer 1")
    Container(dev2_cli, "Dev 2 CLI", "Rust Binary", "Developer 2")
    Container(dev3_cli, "Dev 3 CLI", "Rust Binary", "Developer 3")
    
    System_Boundary(p2p_mesh, "P2P Mesh Network") {
        Component(kad_dht, "Kademlia DHT", "libp2p-kad", "Peer discovery")
        Component(gossipsub, "GossipSub", "libp2p-gossipsub", "Package announcements")
        Component(bitswap, "Bitswap", "IPFS Protocol", "Content exchange")
    }
}

' Scenario 3: CI/CD Integration
System_Boundary(ci_cd, "CI/CD Pipeline") {
    Container(github_actions, "GitHub Actions", "CI Runner", "Automated testing and publishing")
    Container(docker_build, "Docker Build", "Container", "Multi-arch builds")
    Container(artifact_store, "Artifact Store", "GitHub/GitLab", "Built packages")
    
    System_Boundary(ci_marketplace, "CI Marketplace") {
        Component(ci_registry, "LocalRegistry", "SQLite", "Temporary registry")
        Component(ci_storage, "FilePackageStore", "Filesystem", "Build artifacts")
        Component(ci_p2p, "P2P Network", "libp2p", "Publish to network")
    }
}

' Scenario 4: Production Deployment
System_Boundary(production, "Production Environment") {
    Container(prod_node1, "Production Node 1", "Rust Binary", "High-availability node")
    Container(prod_node2, "Production Node 2", "Rust Binary", "High-availability node")
    Container(prod_node3, "Production Node 3", "Rust Binary", "High-availability node")
    
    System_Boundary(prod_p2p, "Production P2P Network") {
        Component(prod_dht, "Kademlia DHT", "libp2p-kad", "Global peer discovery")
        Component(prod_gossip, "GossipSub", "libp2p-gossipsub", "Global announcements")
        Component(prod_bitswap, "Bitswap", "IPFS Protocol", "Global content exchange")
    }
}

' Scenario 5: Edge/Offline Deployment
System_Boundary(edge_network, "Edge/Offline Network") {
    Container(edge_node1, "Edge Node 1", "Rust Binary", "Air-gapped environment")
    Container(edge_node2, "Edge Node 2", "Rust Binary", "Limited connectivity")
    Container(edge_node3, "Edge Node 3", "Rust Binary", "Intermittent connectivity")
    
    System_Boundary(edge_p2p, "Edge P2P Network") {
        Component(edge_dht, "Local DHT", "libp2p-kad", "Local peer discovery")
        Component(edge_gossip, "Local Gossip", "libp2p-gossipsub", "Local announcements")
        Component(edge_bitswap, "Local Bitswap", "IPFS Protocol", "Local content exchange")
    }
}

' Connections for Team Network
Rel(dev1_cli, kad_dht, "Discovers peers", "libp2p")
Rel(dev2_cli, kad_dht, "Discovers peers", "libp2p")
Rel(dev3_cli, kad_dht, "Discovers peers", "libp2p")

Rel(dev1_cli, gossipsub, "Shares packages", "PubSub")
Rel(dev2_cli, gossipsub, "Subscribes to updates", "PubSub")
Rel(dev3_cli, gossipsub, "Subscribes to updates", "PubSub")

' Connections for CI/CD
Rel(github_actions, ci_registry, "Registers packages", "SQLite")
Rel(github_actions, ci_storage, "Stores artifacts", "Filesystem")
Rel(ci_p2p, prod_dht, "Publishes to network", "libp2p")

' Connections for Production
Rel(prod_node1, prod_dht, "Global peer discovery", "libp2p")
Rel(prod_node2, prod_dht, "Global peer discovery", "libp2p")
Rel(prod_node3, prod_dht, "Global peer discovery", "libp2p")

Rel(prod_node1, prod_gossip, "Global announcements", "PubSub")
Rel(prod_node2, prod_gossip, "Global announcements", "PubSub")
Rel(prod_node3, prod_gossip, "Global announcements", "PubSub")

' Connections for Edge Network
Rel(edge_node1, edge_dht, "Local peer discovery", "libp2p")
Rel(edge_node2, edge_dht, "Local peer discovery", "libp2p")
Rel(edge_node3, edge_dht, "Local peer discovery", "libp2p")

note right of dev_machine
  **Single Developer**
  • Works completely offline
  • Local SQLite database
  • Filesystem storage
  • Optional P2P when online
  • Zero external dependencies
end note

note right of team_network
  **Team Development**
  • P2P mesh between developers
  • Automatic package sharing
  • Local-first with sync
  • No central server needed
  • Works across VPNs/firewalls
end note

note right of ci_cd
  **CI/CD Integration**
  • Automated package publishing
  • Multi-architecture builds
  • Publish to global network
  • No Docker registry needed
  • Direct P2P distribution
end note

note right of production
  **Production Deployment**
  • High-availability nodes
  • Global P2P network
  • Redundant content storage
  • No single point of failure
  • Self-healing network
end note

note right of edge_network
  **Edge/Offline Deployment**
  • Air-gapped environments
  • Local P2P mesh
  • Intermittent connectivity
  • Offline-first design
  • Sync when available
end note

SHOW_LEGEND()

@enduml


