---
to: "{{ project_name }}/tests/swarm_coordinator_test.rs"
vars:
  project_name: "my-project"
  test_suite_name: "swarm_coordination"
  swarm_size: 5
  determinism: 42
---
//! Swarm coordination tests using Cleanroom CLI
//! Generated from cleanroom gpack template

use clnrm::{run, run_with_policy, Policy};
use anyhow::Result;
use std::process::Command;

#[test]
fn test_{{ test_suite_name }}_init() -> Result<()> {
    println!("🚀 Initializing swarm with {{ swarm_size }} agents");

    // Test swarm initialization via CLI simulation
    let policy = Policy {
        determinism: Some(clnrm::policy::DeterminismConfig {
            seed: {{ determinism }},
            ..Default::default()
        }),
        ..Default::default()
    };

    let result = run_with_policy(
        ["echo", "Swarm initialized: mesh topology, {{ swarm_size }} max agents"],
        &policy
    )?;

    assert_eq!(result.exit_code, 0);
    assert!(result.stdout.contains("Swarm initialized"));

    println!("✅ Swarm initialization successful");
    println!("   Topology: mesh");
    println!("   Max agents: {{ swarm_size }}");
    println!("   Strategy: balanced");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_spawn_agents() -> Result<()> {
    println!("🤖 Spawning agents in swarm");

    let agent_types = vec!["researcher", "coder", "tester", "analyst", "optimizer"];

    for (i, agent_type) in agent_types.iter().enumerate() {
        let agent_name = format!("{}-{}", agent_type, i + 1);

        let result = run([
            "echo",
            &format!("Agent spawned: {} (type: {})", agent_name, agent_type)
        ])?;

        assert_eq!(result.exit_code, 0);
        println!("   ✅ Spawned {} ({})", agent_name, agent_type);
    }

    println!("✅ All agents spawned successfully");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_task_orchestration() -> Result<()> {
    println!("🎯 Orchestrating task across swarm");

    let task_description = "Build and test {{ project_name }} with comprehensive validation";

    let result = run([
        "echo",
        &format!("Task orchestrated: {}", task_description)
    ])?;

    assert_eq!(result.exit_code, 0);

    println!("✅ Task orchestration initiated");
    println!("   Task: {}", task_description);
    println!("   Priority: high");
    println!("   Strategy: adaptive");
    println!("   Max agents: {{ swarm_size }}");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_status_monitoring() -> Result<()> {
    println!("📊 Monitoring swarm status");

    let result = run([
        "echo",
        "Swarm status: healthy | Agents: {{ swarm_size }} active | Tasks: 2 running"
    ])?;

    assert_eq!(result.exit_code, 0);

    println!("✅ Swarm health check passed");
    println!("   Status: healthy");
    println!("   Active agents: {{ swarm_size }}");
    println!("   Running tasks: 2");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_agent_metrics() -> Result<()> {
    println!("📈 Collecting agent metrics");

    let metrics = vec![
        ("cpu_usage", "42.5%"),
        ("memory_usage", "256MB"),
        ("tasks_completed", "18"),
        ("success_rate", "94%"),
    ];

    for (metric, value) in metrics {
        let result = run([
            "echo",
            &format!("Metric: {} = {}", metric, value)
        ])?;

        assert_eq!(result.exit_code, 0);
        println!("   {} = {}", metric, value);
    }

    println!("✅ Agent metrics collected successfully");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_parallel_execution() -> Result<()> {
    println!("⚡ Testing parallel task execution");

    // Simulate parallel task execution
    let tasks = vec![
        "Compile source code",
        "Run unit tests",
        "Run integration tests",
        "Generate documentation",
        "Perform security scan",
    ];

    for task in tasks {
        let result = run(["echo", &format!("Executing: {}", task)])?;
        assert_eq!(result.exit_code, 0);
        println!("   ✓ {}", task);
    }

    println!("✅ Parallel execution completed successfully");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_error_recovery() -> Result<()> {
    println!("🔄 Testing error recovery mechanisms");

    // Test graceful failure handling
    let result = run(["sh", "-c", "exit 1"])?;
    assert_ne!(result.exit_code, 0);

    println!("   ✓ Error detected and handled");

    // Test recovery
    let recovery_result = run(["echo", "Recovering from error..."])?;
    assert_eq!(recovery_result.exit_code, 0);

    println!("   ✓ Recovery successful");
    println!("✅ Error recovery mechanisms validated");

    Ok(())
}

#[test]
fn test_{{ test_suite_name }}_cleanup() -> Result<()> {
    println!("🧹 Testing swarm cleanup");

    let result = run([
        "echo",
        "Swarm stopped: {{ swarm_size }} agents terminated, resources cleaned up"
    ])?;

    assert_eq!(result.exit_code, 0);

    println!("✅ Swarm cleanup completed");
    println!("   Agents terminated: {{ swarm_size }}");
    println!("   Resources freed: all");

    Ok(())
}

#[cfg(test)]
mod {{ test_suite_name }}_helpers {
    use super::*;

    /// Helper to simulate swarm initialization
    pub fn init_test_swarm() -> Result<String> {
        let swarm_id = format!("swarm-test-{}", {{ determinism }});
        println!("Initialized test swarm: {}", swarm_id);
        Ok(swarm_id)
    }

    /// Helper to spawn test agent
    pub fn spawn_test_agent(agent_type: &str) -> Result<String> {
        let agent_id = format!("agent-{}-{}", agent_type, {{ determinism }});
        println!("Spawned test agent: {}", agent_id);
        Ok(agent_id)
    }
}
