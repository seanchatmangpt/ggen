---
to: "src/api/{{endpoint}}.rs"
vars:
  endpoint: "users"
  method: "GET"
rdf:
  - "graphs/api.ttl"
shape:
  - "graphs/shapes/api.shacl.ttl"
sparql:
  - "SELECT ?endpoint ?method WHERE { ?endpoint http:methodName ?method }"
determinism:
  seed: "api-endpoint"
  sort_order: ["endpoint", "method"]
---
use axum::{routing::{{method|lower}}, Router};
use utils::error::Result;

pub async fn {{endpoint}}_handler() -> Result<String> {
    // TODO: Implement {{endpoint}} endpoint
    Ok("{{endpoint}} response".to_string())
}

pub fn {{endpoint}}_routes() -> Router {
    Router::new()
        .route("/{{endpoint}}", {{method|lower}}({{endpoint}}_handler))
}
