---
to: "composables/{{composable_name}}.ts"
vars:
  composable_name: "usePackages"
rdf:
  - "graphs/marketplace-project.ttl"
  - "graphs/nuxt-ontology.ttl"
sparql:
  - |
    SELECT ?name ?returnType ?imports
    WHERE {
      ?composable a nuxt:Composable ;
                  nuxt:name "{{composable_name}}" ;
                  nuxt:returnType ?returnType .
      OPTIONAL { ?composable nuxt:imports ?imports }
    }
determinism:
  seed: "nuxt-composable-{{composable_name}}"
---
{{ sparql_results.imports }}

export const {{composable_name}} = (): {{ sparql_results.returnType }} => {
  const packages = ref<Package[]>([])

  const fetchPackages = async () => {
    try {
      const { data } = await useFetch('/api/packages')
      if (data.value) {
        packages.value = data.value
      }
    } catch (error) {
      console.error('Failed to fetch packages:', error)
    }
  }

  const searchPackages = async (query: string) => {
    try {
      const { data } = await useFetch(`/api/packages/search?q=${query}`)
      if (data.value) {
        packages.value = data.value
      }
    } catch (error) {
      console.error('Failed to search packages:', error)
    }
  }

  return {
    packages,
    fetchPackages,
    searchPackages
  }
}
