@prefix nuxt: <http://ggen.io/nuxt#> .
@prefix mp: <http://marketplace.example/> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .

# Marketplace Pages
mp:IndexPage rdf:type nuxt:Page ;
    nuxt:name "index" ;
    nuxt:path "/" ;
    nuxt:layout mp:DefaultLayout ;
    nuxt:usesComposable mp:UsePackagesComposable ;
    nuxt:template """<div>
  <h1>Template Marketplace</h1>
  <PackageGrid :packages="packages" />
</div>""" ;
    nuxt:script """const { packages, fetchPackages } = usePackages()

onMounted(async () => {
  await fetchPackages()
})""" .

mp:PackageDetailPage rdf:type nuxt:Page ;
    nuxt:name "package-[id]" ;
    nuxt:path "/package/:id" ;
    nuxt:layout mp:DefaultLayout ;
    nuxt:usesComposable mp:UsePackageComposable ;
    nuxt:template """<div>
  <h1>{{ package.name }}</h1>
  <p>{{ package.description }}</p>
  <button @click=\"installPackage\">Install</button>
</div>""" ;
    nuxt:script """const route = useRoute()
const { package, fetchPackage, installPackage } = usePackage(route.params.id)

onMounted(async () => {
  await fetchPackage()
})""" .

# Marketplace Components
mp:PackageCard rdf:type nuxt:Component ;
    nuxt:name "PackageCard" ;
    nuxt:hasProps "package: Package" ;
    nuxt:emits "['install', 'view']" ;
    nuxt:template """<div class=\"package-card\">
  <h3>{{ package.name }}</h3>
  <p>{{ package.description }}</p>
  <div class=\"actions\">
    <button @click=\"$emit('view', package.id)\">View</button>
    <button @click=\"$emit('install', package.id)\">Install</button>
  </div>
</div>""" ;
    nuxt:script """interface Props {
  package: Package
}

const props = defineProps<Props>()""" ;
    nuxt:style """.package-card {
  border: 1px solid #ddd;
  border-radius: 8px;
  padding: 1rem;
  transition: transform 0.2s;
}

.package-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 4px 8px rgba(0,0,0,0.1);
}""" .

mp:PackageGrid rdf:type nuxt:Component ;
    nuxt:name "PackageGrid" ;
    nuxt:hasProps "packages: Package[]" ;
    nuxt:emits "['selectPackage']" ;
    nuxt:template """<div class=\"package-grid\">
  <PackageCard
    v-for=\"pkg in packages\"
    :key=\"pkg.id\"
    :package=\"pkg\"
    @view=\"handleView\"
    @install=\"handleInstall\"
  />
</div>""" ;
    nuxt:script """interface Props {
  packages: Package[]
}

const props = defineProps<Props>()
const router = useRouter()

const handleView = (id: string) => {
  router.push(`/package/${id}`)
}

const handleInstall = async (id: string) => {
  // Installation logic
}""" ;
    nuxt:style """.package-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
  gap: 1.5rem;
  padding: 2rem;
}""" .

# Composables
mp:UsePackagesComposable rdf:type nuxt:Composable ;
    nuxt:name "usePackages" ;
    nuxt:returnType "{ packages: Ref<Package[]>, fetchPackages: () => Promise<void>, searchPackages: (query: string) => Promise<void> }" ;
    nuxt:imports "import type { Package } from '~/types/package'" .

mp:UsePackageComposable rdf:type nuxt:Composable ;
    nuxt:name "usePackage" ;
    nuxt:returnType "{ package: Ref<Package | null>, fetchPackage: () => Promise<void>, installPackage: () => Promise<void> }" ;
    nuxt:imports "import type { Package } from '~/types/package'" .

mp:UseSearchComposable rdf:type nuxt:Composable ;
    nuxt:name "useSearch" ;
    nuxt:returnType "{ query: Ref<string>, results: Ref<Package[]>, search: () => Promise<void> }" ;
    nuxt:imports "import type { Package } from '~/types/package'" .

# Layouts
mp:DefaultLayout rdf:type nuxt:Layout ;
    nuxt:name "default" ;
    nuxt:template """<div>
  <Header />
  <main>
    <slot />
  </main>
  <Footer />
</div>""" .

# API Endpoints
mp:PackagesAPI rdf:type nuxt:API ;
    nuxt:name "packages" ;
    nuxt:path "/api/packages" .

mp:PackageDetailAPI rdf:type nuxt:API ;
    nuxt:name "package-detail" ;
    nuxt:path "/api/packages/[id]" .
