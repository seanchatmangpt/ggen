//! Generate SPARQL queries using AI

use clap::Args;
use ggen_core::Graph;
use ggen_utils::error::Result;

#[derive(Debug, Args)]
pub struct SparqlArgs {
    /// Description of the SPARQL query to generate
    #[arg(short, long)]
    pub description: String,

    /// RDF graph file to analyze for query generation
    #[arg(short, long)]
    pub graph: Option<String>,

    /// Output format (sparql, json, convert-json-to-sparql)
    #[arg(short, long, default_value = "sparql")]
    pub format: String,

    /// Output file path
    #[arg(short, long)]
    pub output: Option<String>,

    /// Use mock client for testing
    #[arg(long)]
    pub mock: bool,

    /// Model name to use
    #[arg(long)]
    pub model: Option<String>,

    /// Temperature for generation
    #[arg(long)]
    pub temperature: Option<f32>,

    /// Maximum tokens to generate
    #[arg(long)]
    pub max_tokens: Option<u32>,
}

pub async fn run(args: &SparqlArgs) -> Result<()> {
    println!("üîç Generating SPARQL query...");
    println!("Description: {}", args.description);

    if let Some(graph_path) = &args.graph {
        println!("Graph file: {}", graph_path);
    }

    println!("Output format: {}", args.format);

    // Load RDF graph if provided
    let _graph = if let Some(graph_path) = &args.graph {
        println!("üìä Loading RDF graph from: {}", graph_path);
        Graph::load_from_file(graph_path)
            .map_err(|e| ggen_utils::error::Error::new(&format!("Failed to load graph: {}", e)))?
    } else {
        println!("üìä Using empty graph for query generation");
        Graph::new().map_err(|e| {
            ggen_utils::error::Error::new(&format!("Failed to create empty graph: {}", e))
        })?
    };

    // Generate basic SPARQL query (placeholder)
    let sparql_query = format!(
        "SELECT ?s ?p ?o WHERE {{ ?s ?p ?o }} # Generated for: {}",
        args.description
    );

    println!("‚úÖ SPARQL query generated successfully!");

    // Convert to requested format
    let output_content = match args.format.as_str() {
        "json" => {
            println!("üîÑ Converting SPARQL to JSON format...");
            format!(
                r#"{{"query": "{}", "description": "{}", "generated_at": "{}"}}"#,
                sparql_query.trim(),
                args.description,
                chrono::Utc::now().to_rfc3339()
            )
        }
        "sparql" | _ => {
            println!("üìÑ Returning SPARQL format...");
            format!(
                "# Generated SPARQL Query\n\
                 # Description: {}\n\
                 # Generated by ggen\n\
                 # Generated at: {}\n\
                 \n{}",
                args.description,
                chrono::Utc::now().to_rfc3339(),
                sparql_query.trim()
            )
        }
    };

    // Output handling following core team best practices
    if let Some(output_path) = &args.output {
        std::fs::write(output_path, &output_content).map_err(|e| {
            ggen_utils::error::Error::new(&format!("Failed to write SPARQL query to disk: {}", e))
        })?;
        println!("üìÅ Saved to: {}", output_path);
    } else {
        println!("üìÑ Generated SPARQL query:");
        println!("{}", output_content);
    }

    Ok(())
}
