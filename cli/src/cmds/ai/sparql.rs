//! Generate SPARQL queries using AI

use clap::Args;
use ggen_utils::error::Result;
use ggen_core::Graph;
use serde_json::json;
use anyhow;
use ggen_ai::SparqlGenerator;
use ggen_ai::providers::OllamaClient;
use ggen_ai::config::OllamaConfig;
use std::fs;

#[derive(Debug, Args)]
pub struct SparqlArgs {
    /// Description of the SPARQL query to generate
    #[arg(short, long)]
    pub description: String,

    /// RDF graph file to analyze for query generation
    #[arg(short, long)]
    pub graph: Option<String>,

    /// Output format (sparql, json, convert-json-to-sparql)
    #[arg(short, long, default_value = "sparql")]
    pub format: String,

    /// Output file path
    #[arg(short, long)]
    pub output: Option<String>,
}

pub async fn run(args: &SparqlArgs) -> Result<()> {
    println!("üîç Generating SPARQL query with AI...");
    println!("Description: {}", args.description);

    if let Some(graph_path) = &args.graph {
        println!("Graph file: {}", graph_path);
    }

    println!("Output format: {}", args.format);

    // Load RDF graph if provided
    let graph = if let Some(graph_path) = &args.graph {
        println!("üìä Loading RDF graph from: {}", graph_path);
        // TODO: Implement Graph::load_from_file when available
        println!("‚ö†Ô∏è  Graph loading not yet implemented, using empty graph");
        Graph::new()
            .map_err(|e| ggen_utils::error::Error::new(&format!("Failed to create empty graph: {}", e)))?
    } else {
        println!("üìä Using empty graph for query generation");
        Graph::new()
            .map_err(|e| ggen_utils::error::Error::new(&format!("Failed to create empty graph: {}", e)))?
    };

    // Create Ollama client with qwen3-coder:30b model
    let config = OllamaConfig::new();
    let client = OllamaClient::new(config)
        .map_err(|e| ggen_utils::error::Error::from(anyhow::anyhow!(e.to_string())))?;
    let generator = SparqlGenerator::with_ollama_qwen3_coder(Box::new(client));

    // Generate SPARQL query
    let sparql_query = generator.generate_query(&graph, &args.description)
        .await
        .map_err(|e| ggen_utils::error::Error::from(anyhow::anyhow!(e.to_string())))?;

    println!("‚úÖ SPARQL query generated successfully!");

    // Convert to requested format
    let output_content = match args.format.as_str() {
        "json" => {
            println!("üîÑ Converting SPARQL to JSON format...");

            // Create JSON representation of the SPARQL query
            let json_sparql = json!({
                "query": sparql_query.trim(),
                "description": args.description,
                "generated_at": chrono::Utc::now().to_rfc3339(),
                "graph_info": if args.graph.is_some() {
                    json!({
                        "source": args.graph
                    })
                } else {
                    json!(null)
                }
            });

            serde_json::to_string_pretty(&json_sparql)
                .map_err(|e| ggen_utils::error::Error::new(&format!("Failed to serialize JSON: {}", e)))?
        }
        "sparql" | _ => {
            println!("üìÑ Returning SPARQL format...");
            format!(
                "# Generated SPARQL Query\n\
                 # Description: {}\n\
                 # Generated by ggen-ai with Ollama qwen3-coder:30b\n\
                 # Generated at: {}\n\
                 \n{}",
                args.description,
                chrono::Utc::now().to_rfc3339(),
                sparql_query.trim()
            )
        }
    };

    if let Some(output_path) = &args.output {
        fs::write(output_path, &output_content)?;
        println!("üìÅ Saved to: {}", output_path);
    } else {
        println!("üìÑ Generated SPARQL query:");
        println!("{}", output_content);
    }

    Ok(())
}
