{
  "tools": [
    {
      "name": "ggen_project_gen",
      "description": "Generate artifacts from a template with variable substitution. Supports both built-in and custom templates. Example: ggen_project_gen({template: 'rust-cli', vars: {name: 'my-app'}})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template name (from marketplace) or file path (.tmpl file). Examples: 'rust-cli', './custom.tmpl', 'python-api'"
          },
          "vars": {
            "type": "object",
            "description": "Template variables for substitution as key-value pairs. Example: {name: 'my-app', author: 'John Doe', version: '1.0.0'}",
            "additionalProperties": {
              "type": "string"
            }
          },
          "output_dir": {
            "type": "string",
            "description": "Output directory for generated files. Defaults to current directory",
            "default": "."
          },
          "dry_run": {
            "type": "boolean",
            "description": "Preview changes without writing files. Shows what would be generated",
            "default": false
          },
          "force": {
            "type": "boolean",
            "description": "Overwrite existing files without confirmation",
            "default": false
          }
        },
        "required": ["template"]
      }
    },
    {
      "name": "ggen_project_plan",
      "description": "Create an execution plan for template generation showing all changes before applying. Useful for reviewing what files will be created/modified. Example: ggen_project_plan({template: 'react-app', vars: {name: 'dashboard'}})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template name or path to analyze"
          },
          "vars": {
            "type": "object",
            "description": "Template variables for planning",
            "additionalProperties": {
              "type": "string"
            }
          },
          "output_dir": {
            "type": "string",
            "description": "Target output directory",
            "default": "."
          },
          "format": {
            "type": "string",
            "description": "Output format for the plan",
            "enum": ["text", "json", "markdown"],
            "default": "text"
          }
        },
        "required": ["template"]
      }
    },
    {
      "name": "ggen_project_apply",
      "description": "Apply a previously created execution plan to generate files. Works in conjunction with ggen_project_plan. Example: ggen_project_apply({plan_id: 'abc123'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "plan_id": {
            "type": "string",
            "description": "Unique identifier of the plan to apply (returned from ggen_project_plan)"
          },
          "force": {
            "type": "boolean",
            "description": "Apply plan even if conflicts detected",
            "default": false
          },
          "backup": {
            "type": "boolean",
            "description": "Create backups of files before overwriting",
            "default": true
          }
        },
        "required": ["plan_id"]
      }
    },
    {
      "name": "ggen_project_diff",
      "description": "Show differences between current state and planned generation. Highlights what would change if template is applied. Example: ggen_project_diff({template: 'node-api', target_dir: './api'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template to compare against current state"
          },
          "vars": {
            "type": "object",
            "description": "Template variables",
            "additionalProperties": {
              "type": "string"
            }
          },
          "target_dir": {
            "type": "string",
            "description": "Directory to compare",
            "default": "."
          },
          "format": {
            "type": "string",
            "description": "Diff output format",
            "enum": ["unified", "side-by-side", "json"],
            "default": "unified"
          },
          "context_lines": {
            "type": "integer",
            "description": "Number of context lines in diff output",
            "default": 3,
            "minimum": 0
          }
        },
        "required": ["template"]
      }
    },
    {
      "name": "ggen_project_test",
      "description": "Test template generation without writing files. Validates template syntax and variable substitution. Example: ggen_project_test({template: 'my-template.tmpl', vars: {env: 'prod'}})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template to test"
          },
          "vars": {
            "type": "object",
            "description": "Test variables",
            "additionalProperties": {
              "type": "string"
            }
          },
          "verbose": {
            "type": "boolean",
            "description": "Show detailed test output including all substitutions",
            "default": false
          },
          "check_refs": {
            "type": "boolean",
            "description": "Validate all variable references in template",
            "default": true
          }
        },
        "required": ["template"]
      }
    },
    {
      "name": "ggen_project_freeze",
      "description": "Freeze current project state into a reusable template. Captures files, structure, and variables for later regeneration. Example: ggen_project_freeze({name: 'my-project-template', output: './templates/'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name for the frozen template"
          },
          "source_dir": {
            "type": "string",
            "description": "Directory to freeze into template",
            "default": "."
          },
          "output": {
            "type": "string",
            "description": "Output path for frozen template file",
            "default": "./frozen-template.tmpl"
          },
          "include": {
            "type": "array",
            "description": "File patterns to include (glob patterns)",
            "items": {
              "type": "string"
            },
            "default": ["**/*"]
          },
          "exclude": {
            "type": "array",
            "description": "File patterns to exclude (glob patterns)",
            "items": {
              "type": "string"
            },
            "default": ["node_modules/**", ".git/**", "target/**"]
          },
          "extract_vars": {
            "type": "boolean",
            "description": "Automatically detect and extract variables from content",
            "default": true
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_project_inject",
      "description": "Inject code or content into existing files at marked injection points. Useful for extending generated code. Example: ggen_project_inject({file: 'main.rs', marker: 'IMPORTS', content: 'use std::fs;'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Target file path for injection"
          },
          "marker": {
            "type": "string",
            "description": "Injection point marker/identifier in the file. Format: // GGEN:MARKER_NAME"
          },
          "content": {
            "type": "string",
            "description": "Content to inject at the marker point"
          },
          "position": {
            "type": "string",
            "description": "Where to inject relative to marker",
            "enum": ["before", "after", "replace"],
            "default": "after"
          },
          "create_marker": {
            "type": "boolean",
            "description": "Create marker if it doesn't exist",
            "default": false
          }
        },
        "required": ["file", "marker", "content"]
      }
    },
    {
      "name": "ggen_project_validate",
      "description": "Validate generated project structure and content against template specifications. Checks for completeness and correctness. Example: ggen_project_validate({project_dir: './my-app'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project_dir": {
            "type": "string",
            "description": "Project directory to validate",
            "default": "."
          },
          "template": {
            "type": "string",
            "description": "Template to validate against (optional, auto-detects if not provided)"
          },
          "strict": {
            "type": "boolean",
            "description": "Enable strict validation mode with additional checks",
            "default": false
          },
          "check_dependencies": {
            "type": "boolean",
            "description": "Validate project dependencies and versions",
            "default": true
          }
        }
      }
    },
    {
      "name": "ggen_project_watch",
      "description": "Watch template files for changes and auto-regenerate. Useful for iterative template development. Example: ggen_project_watch({template: 'dev-template.tmpl', vars: {env: 'dev'}, interval: 2000})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template file to watch"
          },
          "vars": {
            "type": "object",
            "description": "Template variables for regeneration",
            "additionalProperties": {
              "type": "string"
            }
          },
          "output_dir": {
            "type": "string",
            "description": "Output directory for regeneration",
            "default": "."
          },
          "interval": {
            "type": "integer",
            "description": "Watch interval in milliseconds",
            "default": 1000,
            "minimum": 100
          },
          "debounce": {
            "type": "integer",
            "description": "Debounce delay in milliseconds to prevent excessive regeneration",
            "default": 500,
            "minimum": 0
          }
        },
        "required": ["template"]
      }
    },
    {
      "name": "ggen_graph_query",
      "description": "Execute SPARQL queries on RDF knowledge graphs. Query entities, relationships, and patterns. Example: ggen_graph_query({query: 'SELECT ?s ?p ?o WHERE { ?s ?p ?o } LIMIT 10', format: 'json'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "SPARQL query string (SELECT, CONSTRUCT, ASK, or DESCRIBE)"
          },
          "graph": {
            "type": "string",
            "description": "Named graph to query (optional, defaults to default graph)"
          },
          "format": {
            "type": "string",
            "description": "Result format",
            "enum": ["json", "xml", "turtle", "csv", "table"],
            "default": "json"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results",
            "minimum": 1
          },
          "timeout": {
            "type": "integer",
            "description": "Query timeout in milliseconds",
            "default": 30000,
            "minimum": 100
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "ggen_graph_load",
      "description": "Load RDF data from files into the knowledge graph. Supports multiple RDF formats. Example: ggen_graph_load({file: 'data.ttl', format: 'turtle', graph: 'my-graph'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "file": {
            "type": "string",
            "description": "Path to RDF file to load"
          },
          "format": {
            "type": "string",
            "description": "RDF format",
            "enum": ["turtle", "ntriples", "rdfxml", "jsonld", "nquads"],
            "default": "turtle"
          },
          "graph": {
            "type": "string",
            "description": "Target named graph (optional, uses default graph if not specified)"
          },
          "base_uri": {
            "type": "string",
            "description": "Base URI for relative references"
          },
          "clear_existing": {
            "type": "boolean",
            "description": "Clear existing graph data before loading",
            "default": false
          }
        },
        "required": ["file"]
      }
    },
    {
      "name": "ggen_graph_export",
      "description": "Export RDF knowledge graph to file in various formats. Example: ggen_graph_export({output: 'export.ttl', format: 'turtle', graph: 'my-graph'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "output": {
            "type": "string",
            "description": "Output file path"
          },
          "format": {
            "type": "string",
            "description": "Export format",
            "enum": ["turtle", "ntriples", "rdfxml", "jsonld", "nquads"],
            "default": "turtle"
          },
          "graph": {
            "type": "string",
            "description": "Named graph to export (optional, exports all graphs if not specified)"
          },
          "compress": {
            "type": "boolean",
            "description": "Compress output file (gzip)",
            "default": false
          },
          "pretty": {
            "type": "boolean",
            "description": "Pretty-print output for readability",
            "default": true
          }
        },
        "required": ["output"]
      }
    },
    {
      "name": "ggen_graph_validate",
      "description": "Validate RDF graph against SHACL shapes or schema constraints. Example: ggen_graph_validate({data: 'data.ttl', shapes: 'shapes.ttl'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "RDF data file or graph to validate"
          },
          "shapes": {
            "type": "string",
            "description": "SHACL shapes file for validation"
          },
          "format": {
            "type": "string",
            "description": "Input format",
            "enum": ["turtle", "rdfxml", "jsonld"],
            "default": "turtle"
          },
          "report_format": {
            "type": "string",
            "description": "Validation report format",
            "enum": ["text", "turtle", "json"],
            "default": "text"
          }
        },
        "required": ["data", "shapes"]
      }
    },
    {
      "name": "ggen_graph_stats",
      "description": "Get statistics about RDF knowledge graph (triple count, class distribution, etc.). Example: ggen_graph_stats({graph: 'my-graph', detailed: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "graph": {
            "type": "string",
            "description": "Named graph to analyze (optional, analyzes all graphs if not specified)"
          },
          "detailed": {
            "type": "boolean",
            "description": "Include detailed statistics (class counts, property usage, etc.)",
            "default": false
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["json", "text", "table"],
            "default": "json"
          }
        }
      }
    },
    {
      "name": "ggen_graph_diff",
      "description": "Compare two RDF graphs and show differences (additions, deletions, changes). Example: ggen_graph_diff({graph1: 'before.ttl', graph2: 'after.ttl', format: 'turtle'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "graph1": {
            "type": "string",
            "description": "First graph file or named graph"
          },
          "graph2": {
            "type": "string",
            "description": "Second graph file or named graph"
          },
          "format": {
            "type": "string",
            "description": "Output format for differences",
            "enum": ["turtle", "json", "text"],
            "default": "text"
          },
          "show_additions": {
            "type": "boolean",
            "description": "Show triples added in graph2",
            "default": true
          },
          "show_deletions": {
            "type": "boolean",
            "description": "Show triples removed from graph1",
            "default": true
          }
        },
        "required": ["graph1", "graph2"]
      }
    },
    {
      "name": "ggen_graph_snapshot",
      "description": "Create a snapshot of the current graph state for versioning or backup. Example: ggen_graph_snapshot({name: 'v1.0.0', graph: 'my-graph', metadata: {author: 'John'}})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Snapshot name/identifier"
          },
          "graph": {
            "type": "string",
            "description": "Named graph to snapshot (optional, snapshots all graphs if not specified)"
          },
          "output_dir": {
            "type": "string",
            "description": "Directory to store snapshot",
            "default": "./snapshots"
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata to store with snapshot",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_market_search",
      "description": "Search the template marketplace by keywords, tags, or categories. Example: ggen_market_search({query: 'rust web', category: 'backend', limit: 10})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "Search query string (searches name, description, tags)"
          },
          "category": {
            "type": "string",
            "description": "Filter by category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops", "all"],
            "default": "all"
          },
          "language": {
            "type": "string",
            "description": "Filter by programming language (e.g., 'rust', 'python', 'javascript')"
          },
          "tags": {
            "type": "array",
            "description": "Filter by tags",
            "items": {
              "type": "string"
            }
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results",
            "default": 20,
            "minimum": 1,
            "maximum": 100
          },
          "sort": {
            "type": "string",
            "description": "Sort results by",
            "enum": ["relevance", "downloads", "rating", "recent"],
            "default": "relevance"
          }
        }
      }
    },
    {
      "name": "ggen_market_add",
      "description": "Add a new template to the local marketplace registry. Example: ggen_market_add({name: 'my-template', path: './template.tmpl', category: 'cli', tags: ['rust', 'tool']})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name (unique identifier)"
          },
          "path": {
            "type": "string",
            "description": "Path to template file (.tmpl)"
          },
          "description": {
            "type": "string",
            "description": "Template description"
          },
          "category": {
            "type": "string",
            "description": "Template category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops"]
          },
          "tags": {
            "type": "array",
            "description": "Template tags for discoverability",
            "items": {
              "type": "string"
            }
          },
          "author": {
            "type": "string",
            "description": "Template author"
          },
          "version": {
            "type": "string",
            "description": "Template version (semver)",
            "default": "0.1.0"
          }
        },
        "required": ["name", "path"]
      }
    },
    {
      "name": "ggen_market_remove",
      "description": "Remove a template from the local marketplace registry. Example: ggen_market_remove({name: 'old-template', force: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name to remove"
          },
          "force": {
            "type": "boolean",
            "description": "Skip confirmation prompt",
            "default": false
          },
          "delete_file": {
            "type": "boolean",
            "description": "Also delete the template file from disk",
            "default": false
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_market_list",
      "description": "List all templates in the marketplace with filtering options. Example: ggen_market_list({category: 'backend', format: 'table'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Filter by category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops", "all"],
            "default": "all"
          },
          "language": {
            "type": "string",
            "description": "Filter by programming language"
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["table", "json", "yaml", "compact"],
            "default": "table"
          },
          "show_details": {
            "type": "boolean",
            "description": "Include detailed information in listing",
            "default": false
          }
        }
      }
    },
    {
      "name": "ggen_market_update",
      "description": "Update template metadata in the marketplace. Example: ggen_market_update({name: 'my-template', description: 'Updated description', version: '1.1.0'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name to update"
          },
          "description": {
            "type": "string",
            "description": "New description"
          },
          "category": {
            "type": "string",
            "description": "New category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops"]
          },
          "tags": {
            "type": "array",
            "description": "Updated tags",
            "items": {
              "type": "string"
            }
          },
          "version": {
            "type": "string",
            "description": "New version (semver)"
          },
          "path": {
            "type": "string",
            "description": "Updated template file path"
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_market_info",
      "description": "Get detailed information about a specific marketplace template. Example: ggen_market_info({name: 'rust-cli', show_schema: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "show_schema": {
            "type": "boolean",
            "description": "Include template variable schema in output",
            "default": false
          },
          "show_examples": {
            "type": "boolean",
            "description": "Include usage examples",
            "default": false
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["text", "json", "yaml"],
            "default": "text"
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_market_install",
      "description": "Install a template from a remote marketplace or URL. Example: ggen_market_install({source: 'https://templates.io/rust-api.tmpl', name: 'rust-api'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Template source URL or remote marketplace identifier"
          },
          "name": {
            "type": "string",
            "description": "Local name for installed template"
          },
          "verify": {
            "type": "boolean",
            "description": "Verify template signature/checksum",
            "default": true
          },
          "force": {
            "type": "boolean",
            "description": "Overwrite existing template with same name",
            "default": false
          }
        },
        "required": ["source"]
      }
    },
    {
      "name": "ggen_market_publish",
      "description": "Publish a local template to a remote marketplace. Example: ggen_market_publish({name: 'my-template', registry: 'https://registry.io', public: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name to publish"
          },
          "registry": {
            "type": "string",
            "description": "Target registry URL"
          },
          "public": {
            "type": "boolean",
            "description": "Make template publicly accessible",
            "default": false
          },
          "license": {
            "type": "string",
            "description": "License identifier (e.g., 'MIT', 'Apache-2.0')"
          },
          "readme": {
            "type": "string",
            "description": "Path to README file to include"
          }
        },
        "required": ["name", "registry"]
      }
    },
    {
      "name": "ggen_market_sync",
      "description": "Synchronize local marketplace with remote registries. Example: ggen_market_sync({registry: 'https://registry.io', force: false})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "registry": {
            "type": "string",
            "description": "Registry URL to sync with (optional, syncs all configured registries if not specified)"
          },
          "force": {
            "type": "boolean",
            "description": "Force update even if local versions are newer",
            "default": false
          },
          "dry_run": {
            "type": "boolean",
            "description": "Preview sync changes without applying",
            "default": false
          }
        }
      }
    },
    {
      "name": "ggen_market_rate",
      "description": "Rate and review a marketplace template. Example: ggen_market_rate({name: 'rust-cli', rating: 5, review: 'Excellent template!'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name to rate"
          },
          "rating": {
            "type": "integer",
            "description": "Rating from 1-5",
            "minimum": 1,
            "maximum": 5
          },
          "review": {
            "type": "string",
            "description": "Written review (optional)"
          }
        },
        "required": ["name", "rating"]
      }
    },
    {
      "name": "ggen_market_stats",
      "description": "Get marketplace statistics and analytics. Example: ggen_market_stats({category: 'backend', timeframe: '30d'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Filter stats by category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops", "all"],
            "default": "all"
          },
          "timeframe": {
            "type": "string",
            "description": "Statistics timeframe",
            "enum": ["7d", "30d", "90d", "1y", "all"],
            "default": "30d"
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["json", "text", "chart"],
            "default": "text"
          }
        }
      }
    },
    {
      "name": "ggen_market_trending",
      "description": "Get trending templates in the marketplace. Example: ggen_market_trending({limit: 10, period: '7d'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "description": "Number of trending templates to return",
            "default": 10,
            "minimum": 1,
            "maximum": 50
          },
          "period": {
            "type": "string",
            "description": "Trending period",
            "enum": ["24h", "7d", "30d"],
            "default": "7d"
          },
          "category": {
            "type": "string",
            "description": "Filter by category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops", "all"],
            "default": "all"
          }
        }
      }
    },
    {
      "name": "ggen_market_featured",
      "description": "Get featured/curated marketplace templates. Example: ggen_market_featured({category: 'cli'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "category": {
            "type": "string",
            "description": "Filter by category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops", "all"],
            "default": "all"
          },
          "limit": {
            "type": "integer",
            "description": "Maximum number of results",
            "default": 10,
            "minimum": 1,
            "maximum": 50
          }
        }
      }
    },
    {
      "name": "ggen_template_new",
      "description": "Create a new template from scratch with guided setup. Example: ggen_template_new({name: 'my-template', category: 'cli', language: 'rust'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name"
          },
          "output": {
            "type": "string",
            "description": "Output path for template file",
            "default": "./template.tmpl"
          },
          "category": {
            "type": "string",
            "description": "Template category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops"]
          },
          "language": {
            "type": "string",
            "description": "Primary programming language"
          },
          "interactive": {
            "type": "boolean",
            "description": "Use interactive mode with prompts",
            "default": false
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_template_list",
      "description": "List all available templates (local and marketplace). Example: ggen_template_list({source: 'local', format: 'table'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string",
            "description": "Template source",
            "enum": ["local", "marketplace", "all"],
            "default": "all"
          },
          "category": {
            "type": "string",
            "description": "Filter by category",
            "enum": ["backend", "frontend", "cli", "library", "fullstack", "mobile", "ml", "devops", "all"],
            "default": "all"
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["table", "json", "yaml", "compact"],
            "default": "table"
          }
        }
      }
    },
    {
      "name": "ggen_template_show",
      "description": "Display template content and metadata. Example: ggen_template_show({name: 'rust-cli', show_content: true, show_vars: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template name or path"
          },
          "show_content": {
            "type": "boolean",
            "description": "Display full template content",
            "default": false
          },
          "show_vars": {
            "type": "boolean",
            "description": "Show template variables and schema",
            "default": true
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["text", "json", "yaml"],
            "default": "text"
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_template_lint",
      "description": "Validate and lint template syntax and structure. Example: ggen_template_lint({template: './my-template.tmpl', strict: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "template": {
            "type": "string",
            "description": "Template file path or name"
          },
          "strict": {
            "type": "boolean",
            "description": "Enable strict validation with additional checks",
            "default": false
          },
          "fix": {
            "type": "boolean",
            "description": "Automatically fix issues where possible",
            "default": false
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["text", "json"],
            "default": "text"
          }
        },
        "required": ["template"]
      }
    },
    {
      "name": "ggen_template_regenerate",
      "description": "Regenerate/update existing generated project from template. Example: ggen_template_regenerate({project_dir: './my-app', template: 'rust-cli', merge_strategy: 'smart'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "project_dir": {
            "type": "string",
            "description": "Project directory to regenerate",
            "default": "."
          },
          "template": {
            "type": "string",
            "description": "Template to regenerate from (auto-detected if not specified)"
          },
          "vars": {
            "type": "object",
            "description": "Updated template variables",
            "additionalProperties": {
              "type": "string"
            }
          },
          "merge_strategy": {
            "type": "string",
            "description": "How to merge changes with existing code",
            "enum": ["overwrite", "smart", "manual", "preserve"],
            "default": "smart"
          },
          "backup": {
            "type": "boolean",
            "description": "Create backup before regeneration",
            "default": true
          }
        }
      }
    },
    {
      "name": "ggen_hook_create",
      "description": "Create a new lifecycle hook for template events. Example: ggen_hook_create({name: 'format-code', event: 'post-gen', script: 'cargo fmt', scope: 'template'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Hook name/identifier"
          },
          "event": {
            "type": "string",
            "description": "Lifecycle event to hook into",
            "enum": ["pre-gen", "post-gen", "pre-apply", "post-apply", "pre-freeze", "post-freeze"]
          },
          "script": {
            "type": "string",
            "description": "Script or command to execute"
          },
          "scope": {
            "type": "string",
            "description": "Hook scope",
            "enum": ["global", "template", "project"],
            "default": "project"
          },
          "template": {
            "type": "string",
            "description": "Specific template to apply hook to (only for scope=template)"
          },
          "async": {
            "type": "boolean",
            "description": "Run hook asynchronously",
            "default": false
          }
        },
        "required": ["name", "event", "script"]
      }
    },
    {
      "name": "ggen_hook_list",
      "description": "List all registered hooks. Example: ggen_hook_list({scope: 'global', event: 'post-gen'})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "scope": {
            "type": "string",
            "description": "Filter by scope",
            "enum": ["global", "template", "project", "all"],
            "default": "all"
          },
          "event": {
            "type": "string",
            "description": "Filter by event",
            "enum": ["pre-gen", "post-gen", "pre-apply", "post-apply", "pre-freeze", "post-freeze", "all"],
            "default": "all"
          },
          "format": {
            "type": "string",
            "description": "Output format",
            "enum": ["table", "json", "yaml"],
            "default": "table"
          }
        }
      }
    },
    {
      "name": "ggen_hook_run",
      "description": "Manually execute a specific hook. Example: ggen_hook_run({name: 'format-code', context: {project_dir: './my-app'}})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Hook name to execute"
          },
          "context": {
            "type": "object",
            "description": "Execution context variables",
            "additionalProperties": {
              "type": "string"
            }
          },
          "dry_run": {
            "type": "boolean",
            "description": "Show what would be executed without running",
            "default": false
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_hook_remove",
      "description": "Remove a registered hook. Example: ggen_hook_remove({name: 'old-hook', force: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Hook name to remove"
          },
          "scope": {
            "type": "string",
            "description": "Hook scope",
            "enum": ["global", "template", "project"]
          },
          "force": {
            "type": "boolean",
            "description": "Skip confirmation prompt",
            "default": false
          }
        },
        "required": ["name"]
      }
    },
    {
      "name": "ggen_hook_validate",
      "description": "Validate hook configuration and script syntax. Example: ggen_hook_validate({name: 'my-hook', check_deps: true})",
      "inputSchema": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Hook name to validate"
          },
          "check_deps": {
            "type": "boolean",
            "description": "Check for required dependencies",
            "default": true
          },
          "check_syntax": {
            "type": "boolean",
            "description": "Validate script syntax",
            "default": true
          }
        },
        "required": ["name"]
      }
    }
  ]
}
