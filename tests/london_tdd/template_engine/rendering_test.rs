//! London TDD tests for template rendering
//!
//! README.md Â§Template Example - Tera Template Rendering
//!
//! Tests verify:
//! - YAML frontmatter parsing
//! - Tera template rendering
//! - Variable substitution
//! - Filters and functions

use crate::lib::*;
use mockall::predicate::*;
use std::collections::HashMap;

#[test]
fn test_template_renders_with_variables() {
    let start = std::time::Instant::now();

    // Arrange
    let template = r#"---
to: "src/{{name}}.rs"
vars:
  name: "example"
  author: "ggen"
---
//! {{name}} module
//! Generated by {{author}}

pub struct {{name | capitalize}} {
    // Implementation
}
"#;

    let mut mock_renderer = MockTemplateRenderer::new();
    mock_renderer
        .expect_render()
        .with(anything(), anything())
        .times(1)
        .returning(|_, _| {
            Ok(r#"//! example module
//! Generated by ggen

pub struct Example {
    // Implementation
}
"#
            .to_string())
        });

    // Act
    let result = render_template(&mock_renderer, template, &HashMap::new());

    // Assert
    assert!(result.is_ok());
    let output = result.unwrap();
    assert!(output.contains("pub struct Example"));

    // Performance
    assert!(start.elapsed().as_millis() < 100);
}

#[test]
fn test_template_parses_frontmatter() {
    // Arrange
    let template = r#"---
to: "output.rs"
vars:
  key: "value"
determinism: 42
---
body content
"#;

    // Act
    let result = parse_template(template);

    // Assert
    assert!(result.is_ok());
    let parsed = result.unwrap();
    assert_eq!(parsed.frontmatter["to"], "output.rs");
    assert_eq!(parsed.frontmatter["determinism"], 42);
    assert_eq!(parsed.body, "body content\n");
}

#[test]
fn test_template_applies_filters() {
    // Arrange
    let template = "{{ name | capitalize }}";
    let mut vars = HashMap::new();
    vars.insert("name".to_string(), "hello".to_string());

    let mut mock_renderer = MockTemplateRenderer::new();
    mock_renderer
        .expect_render()
        .returning(|_, _| Ok("Hello".to_string()));

    // Act
    let result = render_template(&mock_renderer, template, &vars);

    // Assert
    assert!(result.is_ok());
    assert_eq!(result.unwrap(), "Hello");
}

#[test]
fn test_template_handles_missing_variables() {
    // Arrange
    let template = "{{ missing_var }}";
    let mock_renderer = MockTemplateRenderer::new();

    // Act
    let result = render_template(&mock_renderer, template, &HashMap::new());

    // Assert: Should error on missing variable
    assert!(result.is_err());
}

#[test]
fn test_template_supports_nested_variables() {
    // Arrange
    let template = "{{ config.database.host }}";
    let mut vars = HashMap::new();
    vars.insert(
        "config".to_string(),
        r#"{"database": {"host": "localhost"}}"#.to_string(),
    );

    let mut mock_renderer = MockTemplateRenderer::new();
    mock_renderer
        .expect_render()
        .returning(|_, _| Ok("localhost".to_string()));

    // Act
    let result = render_template(&mock_renderer, template, &vars);

    // Assert
    assert!(result.is_ok());
    assert_eq!(result.unwrap(), "localhost");
}

// Helper types and functions

#[automock]
trait TemplateRenderer: Send + Sync {
    fn render(&self, template: &str, vars: &HashMap<String, String>) -> Result<String, anyhow::Error>;
}

#[derive(Debug)]
struct ParsedTemplate {
    frontmatter: HashMap<String, serde_yaml::Value>,
    body: String,
}

fn render_template(
    renderer: &dyn TemplateRenderer,
    template: &str,
    vars: &HashMap<String, String>,
) -> Result<String, anyhow::Error> {
    renderer.render(template, vars)
}

fn parse_template(template: &str) -> Result<ParsedTemplate, anyhow::Error> {
    let parts: Vec<&str> = template.split("---").collect();
    if parts.len() < 3 {
        return Err(anyhow::anyhow!("Invalid template format"));
    }

    let frontmatter: HashMap<String, serde_yaml::Value> =
        serde_yaml::from_str(parts[1].trim())?;
    let body = parts[2].to_string();

    Ok(ParsedTemplate { frontmatter, body })
}
