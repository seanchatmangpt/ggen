# Environment Configuration Template
# Copy to .env and customize for your environment

# ============================================================================
# WORKSPACE CONFIGURATION
# ============================================================================

# Build mode (debug, release, release-with-debug)
BUILD_MODE=release

# Rust toolchain channel
RUST_TOOLCHAIN=stable

# Target triple (leave empty for host default)
# CARGO_BUILD_TARGET=x86_64-unknown-linux-gnu

# ============================================================================
# LIFECYCLE SETTINGS
# ============================================================================

# Enable parallel compilation (true/false)
CARGO_BUILD_JOBS=4

# Incremental compilation (true/false)
CARGO_INCREMENTAL=1

# Test threads (number or empty for default)
RUST_TEST_THREADS=4

# Benchmark iterations
CRITERION_SAMPLE_SIZE=100

# ============================================================================
# LOGGING AND DEBUGGING
# ============================================================================

# Log level (error, warn, info, debug, trace)
RUST_LOG=info

# Backtrace (0, 1, full)
RUST_BACKTRACE=1

# Colored output (always, auto, never)
CARGO_TERM_COLOR=always

# ============================================================================
# EXAMPLE: ADVANCED CLI TOOL
# ============================================================================

# CLI configuration file path
CLI_CONFIG_PATH=./config/cli-config.toml

# CLI log output directory
CLI_LOG_DIR=./logs

# CLI default verbosity (0-3)
CLI_VERBOSITY=1

# ============================================================================
# EXAMPLE: ASYNC WEB SERVICE
# ============================================================================

# Server bind address
WEB_HOST=0.0.0.0

# Server port
WEB_PORT=3000

# Database URL (example)
# DATABASE_URL=postgresql://user:pass@localhost/dbname

# Redis URL (example)
# REDIS_URL=redis://localhost:6379

# JWT secret (CHANGE IN PRODUCTION)
# JWT_SECRET=your-secret-key-change-this

# Request timeout (seconds)
WEB_REQUEST_TIMEOUT=30

# Maximum request body size (bytes)
WEB_MAX_BODY_SIZE=1048576

# Enable CORS (true/false)
WEB_CORS_ENABLED=true

# ============================================================================
# EXAMPLE: WASM CRYPTO MODULE
# ============================================================================

# WASM optimization level (0, 1, 2, 3, s, z)
WASM_OPT_LEVEL=z

# Enable WASM SIMD (true/false)
WASM_SIMD_ENABLED=false

# ============================================================================
# EXAMPLE: EMBEDDED IOT
# ============================================================================

# Target microcontroller
# EMBEDDED_TARGET=thumbv7em-none-eabihf

# Flash tool (openocd, jlink, etc.)
EMBEDDED_FLASH_TOOL=openocd

# Serial port for debugging
# EMBEDDED_SERIAL_PORT=/dev/ttyUSB0

# ============================================================================
# PERFORMANCE AND OPTIMIZATION
# ============================================================================

# Link-time optimization (thin, fat, off)
CARGO_PROFILE_RELEASE_LTO=fat

# Codegen units (1 for max optimization)
CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1

# Panic strategy (unwind, abort)
CARGO_PROFILE_RELEASE_PANIC=abort

# ============================================================================
# SECURITY
# ============================================================================

# Cargo audit deny level (advisories, warnings, unsound)
CARGO_AUDIT_DENY=warnings

# Enable cargo-deny (true/false)
ENABLE_CARGO_DENY=true

# ============================================================================
# CI/CD INTEGRATION
# ============================================================================

# CI mode (disables interactive features)
# CI=true

# Skip benchmarks in CI (true/false)
# CI_SKIP_BENCHMARKS=false

# Artifact output directory
ARTIFACT_DIR=./dist

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

# Editor (for cargo-watch integration)
EDITOR=code

# Browser (for opening docs)
BROWSER=firefox

# ============================================================================
# CACHING
# ============================================================================

# Sccache endpoint (optional distributed caching)
# SCCACHE_ENDPOINT=http://localhost:10501

# Cargo home (for custom cache location)
# CARGO_HOME=/custom/cargo/home

# ============================================================================
# MONITORING
# ============================================================================

# Enable timing reports
CARGO_BUILD_TIMINGS=json,html

# Generate dependency graphs
# CARGO_GRAPH_FORMAT=svg

# ============================================================================
# CUSTOM HOOKS
# ============================================================================

# Pre-build hook script
# PRE_BUILD_HOOK=./scripts/pre-build.sh

# Post-build hook script
# POST_BUILD_HOOK=./scripts/post-build.sh

# Pre-test hook script
# PRE_TEST_HOOK=./scripts/pre-test.sh

# ============================================================================
# NOTES
# ============================================================================
#
# 1. Never commit .env with secrets to version control
# 2. Use different .env files for different environments:
#    - .env.development
#    - .env.staging
#    - .env.production
# 3. Override with command-line: BUILD_MODE=debug ggen run build-all
# 4. Validate config: ggen run validate-config
# 5. See README.md for detailed configuration guide
